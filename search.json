[{"title":"Hexo代码无法显示空行，并且行数和代码不对齐","url":"https://cosysn.github.io/2017/07/20/hexo-code-block-blank-line-incorrect/","content":"<h2 id=\"0-问题描述\"><a href=\"#0-问题描述\" class=\"headerlink\" title=\"0. 问题描述\"></a>0. 问题描述</h2><p>使用hexo后显示代码块存在问题，会自动删除部分空行，以及行数和代码不对齐</p>\n<p>比如我想显示下面的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> a, b;</div><div class=\"line\">&nbsp</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a+b\"</span>, a+b);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是实际的显示效果如下图所示：</p>\n<p><img src=\"/2017/07/20/hexo-code-block-blank-line-incorrect/code_incorrect.png\" alt=\"\"></p>\n<p>我们可以看到空行被删除，导致行号和代码无法对其。</p>\n<h2 id=\"1-问题分析\"><a href=\"#1-问题分析\" class=\"headerlink\" title=\"1. 问题分析\"></a>1. 问题分析</h2><ol>\n<li><p>首先看网页源码，看看对应的网页源码是否存在问题</p>\n<p>我们可以看到2和6这两个空行没有显示出来，而对应的html代码如下：</p>\n<p><img src=\"/2017/07/20/hexo-code-block-blank-line-incorrect/line_blank.png\" alt=\"\"></p>\n<p>上面标注的就是没有显示出来的行，可以看到虽然生成相应的div，但是其内容是空的。</p>\n<p>通过查询资料可以知道，如果div标签的内容为空的话，是无法在浏览器上显示出来的，详情见下面的链接：</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/4171286/how-to-make-a-div-with-no-content-have-a-width\" target=\"_blank\" rel=\"external\">How to make a DIV with no content have a width?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2114667/html-div-element-disappears-with-no-content\" target=\"_blank\" rel=\"external\">HTML DIV element Disappears with no content</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6310808/div-with-background-image-and-no-content-not-displaying\" target=\"_blank\" rel=\"external\">Div with background image and no content not displaying</a></li>\n</ul>\n</li>\n<li><p>上面知道了是因为空行生成的div的内容是空的导致浏览器无法显示出来，那么如果我们在写代码的时候，每个空行都加几个空格，保证div的内容不是空，是不是就可以将空行显示出来。</p>\n</li>\n<li><p>经过测试，发现将空行上添加多个空格后，就能将空行正常显示出来了。</p>\n<p><img src=\"/2017/07/20/hexo-code-block-blank-line-incorrect/code_correct.png\" alt=\"\"></p>\n<p>而且生成的html代码中空行对应的div的内容也不是空的了。</p>\n<p><img src=\"/2017/07/20/hexo-code-block-blank-line-incorrect/line_blank_correct.png\" alt=\"\"></p>\n<p>虽然将每个空行添加了若干了空格暂时规避了该问题，但是那是治标不治本呀，定位到这里基本可以确定是hexo在处理markdown时没有处理这种情况，导致无法正常显示空行。</p>\n<p>下面我们去研究一下，hexo在处理markdown时除了什么问题导致这个现象。</p>\n</li>\n<li><p>经过分析，发现生成代码片段的是在hexo-util/highlight.js文件中的highlightUtil函数，下面分析一下问题出现的原因：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> lines = data.value.split(<span class=\"string\">'\\n'</span>);</div><div class=\"line\"> <span class=\"keyword\">var</span> numbers = <span class=\"string\">''</span>;</div><div class=\"line\"> <span class=\"keyword\">var</span> content = <span class=\"string\">''</span>;</div><div class=\"line\"> <span class=\"keyword\">var</span> result = <span class=\"string\">''</span>;</div><div class=\"line\"> <span class=\"keyword\">var</span> line;</div><div class=\"line\">&nbsp</div><div class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = lines.length; i &lt; len; i++) &#123;</div><div class=\"line\">   line = lines[i];</div><div class=\"line\">   <span class=\"keyword\">if</span> (tab) line = replaceTabs(line, tab);</div><div class=\"line\">   numbers += <span class=\"string\">'&lt;div class=\"line\"&gt;'</span> + (firstLine + i) + <span class=\"string\">'&lt;/div&gt;'</span>;</div><div class=\"line\">   content += <span class=\"string\">'&lt;div class=\"line'</span>;</div><div class=\"line\">   content += (mark.indexOf(firstLine + i) !== <span class=\"number\">-1</span>) ? <span class=\"string\">' marked'</span> : <span class=\"string\">''</span>;</div><div class=\"line\">   content += <span class=\"string\">'\"&gt;'</span> + line + <span class=\"string\">'&lt;/div&gt;'</span>;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>其处理流程如下：</p>\n<ul>\n<li>将获得的代码片段按照’\\n’分割成若干个字符串，每行对应一个字符串；</li>\n<li>遍历所有行进行处理<ul>\n<li>如果开启tab转空格选项，则调用replaceTabs将所有的tab转换为空格；</li>\n<li>生成行号对应的html片段</li>\n<li>生成代码对应的html片段</li>\n</ul>\n</li>\n</ul>\n<p>从上面的处理流程可以看出，如果是空行的话，其会生内容为空的div。</p>\n</li>\n<li><p>至此问题算是定位了。</p>\n</li>\n</ol>\n<h2 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2. 解决方案\"></a>2. 解决方案</h2><p>经过上面的分析，我们已经知道了问题出现的原因，就是因为空行生成的div的内容为空。</p>\n<p>那么我们在生成html代码时，可以判断如果是空行的话，可以在div中添加一个&amp;nbsp，保证div的内容不为空。其代码的修改如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> lines = data.value.split(<span class=\"string\">'\\n'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> numbers = <span class=\"string\">''</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> content = <span class=\"string\">''</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"string\">''</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> line;</div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = lines.length; i &lt; len; i++) &#123;</div><div class=\"line\">    line = lines[i];</div><div class=\"line\">    <span class=\"keyword\">if</span> (tab) line = replaceTabs(line, tab);</div><div class=\"line\">    numbers += <span class=\"string\">'&lt;div class=\"line\"&gt;'</span> + (firstLine + i) + <span class=\"string\">'&lt;/div&gt;'</span>;</div><div class=\"line\">    line = (line.length != <span class=\"number\">0</span>) ? line : <span class=\"string\">'&amp;nbsp'</span>; <span class=\"comment\">// 如果是空行的话，在div的内容添加个&amp;nbsp</span></div><div class=\"line\">    content += <span class=\"string\">'&lt;div class=\"line'</span>;</div><div class=\"line\">    content += (mark.indexOf(firstLine + i) !== <span class=\"number\">-1</span>) ? <span class=\"string\">' marked'</span> : <span class=\"string\">''</span>;</div><div class=\"line\">    content += <span class=\"string\">'\"&gt;'</span> + line + <span class=\"string\">'&lt;/div&gt;'</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-问题验证\"><a href=\"#3-问题验证\" class=\"headerlink\" title=\"3. 问题验证\"></a>3. 问题验证</h2><p>按上述解决方案修改之后，进行验证，发现问题已经解决了，可以正常显示代码。</p>\n<p>如下图所示：</p>\n<p><img src=\"/2017/07/20/hexo-code-block-blank-line-incorrect/code_correct_verify.png\" alt=\"\"></p>\n<p>而对应的代码片段如下：</p>\n<p><img src=\"/2017/07/20/hexo-code-block-blank-line-incorrect/line_blank_correct_verfy.png\" alt=\"\"></p>\n<p>可以看到空行对应的div的内容全部被替换成了</p>\n<h2 id=\"4-参考文献\"><a href=\"#4-参考文献\" class=\"headerlink\" title=\"4. 参考文献\"></a>4. 参考文献</h2><ol>\n<li><a href=\"https://stackoverflow.com/questions/4171286/how-to-make-a-div-with-no-content-have-a-width\" target=\"_blank\" rel=\"external\">How to make a DIV with no content have a width?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2114667/html-div-element-disappears-with-no-content\" target=\"_blank\" rel=\"external\">HTML DIV element Disappears with no content</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6310808/div-with-background-image-and-no-content-not-displaying\" target=\"_blank\" rel=\"external\">Div with background image and no content not displaying</a></li>\n<li><a href=\"https://leokongwq.github.io/2016/10/14/hexo-codeblock-multiblank.html\" target=\"_blank\" rel=\"external\">hexo代码块前后空白行问题</a></li>\n<li><a href=\"https://github.com/forsigner/fexo/issues/46\" target=\"_blank\" rel=\"external\">代码显示行是不是有点小问题呢？</a></li>\n<li><a href=\"https://github.com/cosysn/hexo-blog/issues/1\" target=\"_blank\" rel=\"external\">显示代码块存在问题，会自动删除部分空行，以及行数和代码不对齐 #1</a></li>\n</ol>\n","categories":[],"tags":[]},{"title":"折腾Hexo遇到的那些坑（长期更新中）","url":"https://cosysn.github.io/2017/07/18/hexo-some-problems/","content":"<h1 id=\"折腾Hexo遇到的那些坑\"><a href=\"#折腾Hexo遇到的那些坑\" class=\"headerlink\" title=\"折腾Hexo遇到的那些坑\"></a>折腾Hexo遇到的那些坑</h1><h2 id=\"1-标题中使用特殊字符如-等\"><a href=\"#1-标题中使用特殊字符如-等\" class=\"headerlink\" title=\"1. 标题中使用特殊字符如:[]等\"></a>1. 标题中使用特殊字符如:[]等</h2><h3 id=\"1-1-问题描述\"><a href=\"#1-1-问题描述\" class=\"headerlink\" title=\"1.1. 问题描述\"></a>1.1. 问题描述</h3><p>在文章的标题中增加了:符号后，发现hexo生成html文档失败，并且会打印异常的堆栈：</p>\n<figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">15:49:15.773 ERROR Process failed: _posts/esxi-migrate-vm-failed-with-pbm-error-occurred.md</div><div class=\"line\">YAMLException: incomplete explicit mapping pair; a key node is missed at line 1, column 73:</div><div class=\"line\">     ... uring pre migrate check callback: connection refused</div><div class=\"line\">                                         ^</div><div class=\"line\">    at generateError (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\j</span>s-yaml<span class=\"symbol\">\\l</span>ib<span class=\"symbol\">\\j</span>s-yaml<span class=\"symbol\">\\l</span>oader.js:165:10)</div><div class=\"line\">    at throwError (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\j</span>s-yaml<span class=\"symbol\">\\l</span>ib<span class=\"symbol\">\\j</span>s-yaml<span class=\"symbol\">\\l</span>oader.js:171:9)</div><div class=\"line\">    at readBlockMapping (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\j</span>s-yaml<span class=\"symbol\">\\l</span>ib<span class=\"symbol\">\\j</span>s-yaml<span class=\"symbol\">\\l</span>oader.js:1000:9)</div><div class=\"line\">    at composeNode (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\j</span>s-yaml<span class=\"symbol\">\\l</span>ib<span class=\"symbol\">\\j</span>s-yaml<span class=\"symbol\">\\l</span>oader.js:1332:12)</div><div class=\"line\">    at readDocument (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\j</span>s-yaml<span class=\"symbol\">\\l</span>ib<span class=\"symbol\">\\j</span>s-yaml<span class=\"symbol\">\\l</span>oader.js:1492:3)</div><div class=\"line\">    at loadDocuments (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\j</span>s-yaml<span class=\"symbol\">\\l</span>ib<span class=\"symbol\">\\j</span>s-yaml<span class=\"symbol\">\\l</span>oader.js:1548:5)</div><div class=\"line\">    at Object.load (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\j</span>s-yaml<span class=\"symbol\">\\l</span>ib<span class=\"symbol\">\\j</span>s-yaml<span class=\"symbol\">\\l</span>oader.js:1569:19)</div><div class=\"line\">    at parseYAML (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\h</span>exo-front-matter<span class=\"symbol\">\\l</span>ib<span class=\"symbol\">\\f</span>ront_matter.js:80:21)</div><div class=\"line\">    at parse (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\h</span>exo-front-matter<span class=\"symbol\">\\l</span>ib<span class=\"symbol\">\\f</span>ront_matter.js:56:12)</div><div class=\"line\">    at H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\h</span>exo<span class=\"symbol\">\\l</span>ib<span class=\"symbol\">\\p</span>lugins<span class=\"symbol\">\\p</span>rocessor<span class=\"symbol\">\\p</span>ost.js:52:18</div><div class=\"line\">    at tryCatcher (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\u</span>til.js:16:23)</div><div class=\"line\">    at Promise._settlePromiseFromHandler (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:509:35)</div><div class=\"line\">    at Promise._settlePromise (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:569:18)</div><div class=\"line\">    at Promise._settlePromise0 (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:614:10)</div><div class=\"line\">    at Promise._settlePromises (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:693:18)</div><div class=\"line\">    at Promise._fulfill (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:638:18)</div><div class=\"line\">    at PromiseArray._resolve (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise_array.js:126:19)</div><div class=\"line\">    at PromiseArray._promiseFulfilled (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise_array.js:144:14)</div><div class=\"line\">    at PromiseArray._iterate (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise_array.js:114:31)</div><div class=\"line\">    at PromiseArray.init [as _init] (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise_array.js:78:10)</div><div class=\"line\">    at Promise._settlePromise (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:566:21)</div><div class=\"line\">    at Promise._settlePromise0 (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:614:10)</div><div class=\"line\">    at Promise._settlePromises (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:693:18)</div><div class=\"line\">    at Promise._fulfill (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:638:18)</div><div class=\"line\">    at PromiseArray._resolve (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise_array.js:126:19)</div><div class=\"line\">    at PromiseArray._promiseFulfilled (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise_array.js:144:14)</div><div class=\"line\">    at Promise._settlePromise (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:574:26)</div><div class=\"line\">    at Promise._settlePromise0 (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:614:10)</div><div class=\"line\">    at Promise._settlePromises (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:693:18)</div><div class=\"line\">    at Promise._fulfill (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:638:18)</div><div class=\"line\">    at Promise._resolveCallback (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:432:57)</div><div class=\"line\">    at Promise._settlePromiseFromHandler (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:524:17)</div><div class=\"line\">    at Promise._settlePromise (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:569:18)</div><div class=\"line\">    at Promise._settlePromise0 (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:614:10)</div><div class=\"line\">    at Promise._settlePromises (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:693:18)</div><div class=\"line\">    at Promise._fulfill (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\p</span>romise.js:638:18)</div><div class=\"line\">    at H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\b</span>luebird<span class=\"symbol\">\\j</span>s<span class=\"symbol\">\\r</span>elease<span class=\"symbol\">\\n</span>odeback.js:42:21</div><div class=\"line\">    at H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\g</span>raceful-fs<span class=\"symbol\">\\g</span>raceful-fs.js:78:16</div><div class=\"line\">    at tryToString (fs.js:456:3)</div><div class=\"line\">    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:443:12)</div></pre></td></tr></table></figure>\n<h3 id=\"1-2-解决方案\"><a href=\"#1-2-解决方案\" class=\"headerlink\" title=\"1.2. 解决方案\"></a>1.2. 解决方案</h3><p>YAML的语法中，在冒号后不能跟随特殊符号。故此需要使用其他方式替代。</p>\n<p>通常解决方案有两个：</p>\n<ul>\n<li><strong>使用短杠-替代</strong></li>\n<li>将整个字符串用引号<code>&#39;&#39;</code>/<code>&quot;&quot;</code>进行界定</li>\n</ul>\n<h3 id=\"1-3-参考文献\"><a href=\"#1-3-参考文献\" class=\"headerlink\" title=\"1.3. 参考文献\"></a>1.3. 参考文献</h3><ol>\n<li><a href=\"https://github.com/kadamwhite/expresspress/issues/7\" target=\"_blank\" rel=\"external\">“incomplete explicit mapping pair; a key node is missed”#7</a></li>\n<li><a href=\"https://github.com/hexojs/hexo/issues/1113\" target=\"_blank\" rel=\"external\">May I use <code>[]</code> square brackets and <code>:</code> colon in article title?</a></li>\n<li><a href=\"https://github.com/xovel/xovel.github.io/issues/9\" target=\"_blank\" rel=\"external\">[hexo]技巧 - 标题使用特殊符号如英文冒号和方括号的方式</a></li>\n<li><a href=\"http://xuanwo.org/2014/08/14/hexo-usual-problem/\" target=\"_blank\" rel=\"external\">Hexo常见问题解决方案</a></li>\n<li><a href=\"https://github.com/hexojs/hexo/issues/722\" target=\"_blank\" rel=\"external\">更新至hexo 2.8.0之后报错 #722</a></li>\n</ol>\n<h2 id=\"2-更新日志\"><a href=\"#2-更新日志\" class=\"headerlink\" title=\"2. 更新日志\"></a>2. 更新日志</h2><ul>\n<li>2017年07月18日 完成初稿</li>\n</ul>\n","categories":[],"tags":[]},{"title":"分步式文件存储系统技术及实现","url":"https://cosysn.github.io/2017/07/18/technology-and-realization-of-distributed-file-storage-system/","content":"<h1 id=\"分步式文件存储系统技术及实现\"><a href=\"#分步式文件存储系统技术及实现\" class=\"headerlink\" title=\"分步式文件存储系统技术及实现\"></a>分步式文件存储系统技术及实现</h1><p><a href=\"https://edu.aliyun.com/course/32?spm=5176.8764728.aliyun-edu-course-tab.1.AtxCbD&amp;previewAs=member\" target=\"_blank\" rel=\"external\">分步式文件存储系统技术及实现</a></p>\n<p>姚文辉</p>\n<p>阿里云大学提供的关于分布式存储的实现细节。</p>\n<p>[TOC]</p>\n<h2 id=\"1-分布式存储客观需求\"><a href=\"#1-分布式存储客观需求\" class=\"headerlink\" title=\"1. 分布式存储客观需求\"></a>1. 分布式存储客观需求</h2><h3 id=\"分布式存储系统\"><a href=\"#分布式存储系统\" class=\"headerlink\" title=\"分布式存储系统\"></a>分布式存储系统</h3><ul>\n<li>大数据对分布式存储的需求</li>\n<li>分布式存储系统架构</li>\n<li>分布式存储系统重要的功能剖析</li>\n<li><em>元数据服务器的高可用性和可扩展性</em></li>\n<li><em>多种介质的混合存储系统</em></li>\n</ul>\n<h4 id=\"大数据对分布式存储的需求\"><a href=\"#大数据对分布式存储的需求\" class=\"headerlink\" title=\"大数据对分布式存储的需求\"></a>大数据对分布式存储的需求</h4><p>要对1PB数据排序，我们需要什么样的存储系统？</p>\n<p>存储量（&gt;100PB）</p>\n<p>吞吐量(1PB&lt;2H)</p>\n<p><a href=\"http://sortbenchmark.org\" target=\"_blank\" rel=\"external\">http://sortbenchmark.org</a></p>\n<p>Gray</p>\n<p>需求点：</p>\n<ul>\n<li><p>存储容量大</p>\n</li>\n<li><p>搞吞吐量</p>\n</li>\n<li><p>提高数据可靠性（99.9999999%）</p>\n</li>\n<li><p>服务高可用（99.95%）</p>\n</li>\n<li><p>高效运维</p>\n<p>将日常硬件处理作为常态，做成流程化</p>\n<p>对于监控、报警等机制也要有非常完善的支持</p>\n</li>\n<li><p>低成本</p>\n<p>存储系统的核心竞争力</p>\n<p>保证数据安全、正确服务稳定的前提下降低成本，才是分布式存储的核心竞争力。</p>\n</li>\n</ul>\n<h2 id=\"2-小概率事件对分布式系统的挑战\"><a href=\"#2-小概率事件对分布式系统的挑战\" class=\"headerlink\" title=\"2. 小概率事件对分布式系统的挑战\"></a>2. 小概率事件对分布式系统的挑战</h2><h3 id=\"大规模分布式存储的挑战\"><a href=\"#大规模分布式存储的挑战\" class=\"headerlink\" title=\"大规模分布式存储的挑战\"></a>大规模分布式存储的挑战</h3><p>单机（桌面）系统 –&gt; 小概率出错</p>\n<p>大规模存储  –&gt; 小概率事件成为常态</p>\n<p>概率论：小概率事件一定发生</p>\n<p>哪些小概率事件会发生？</p>\n<ol>\n<li><p>磁盘错误</p>\n<p>发现慢节点就自动规避</p>\n<p>发现机器宕机自动绕过</p>\n</li>\n<li><p>Raid卡故障</p>\n<p>发生在集群里面的高可用节点</p>\n<p>在我们的存储系统中存放Meta</p>\n<p>延迟100-200us</p>\n</li>\n<li><p>网络故障</p>\n</li>\n<li><p>电源故障</p>\n<p>可能会导致MemCache丢数据</p>\n<p>如果数据丢失，怎么去恢复数据</p>\n</li>\n<li><p>数据错误</p>\n<ul>\n<li><p>磁盘</p>\n</li>\n<li><p>网络</p>\n</li>\n<li><p>内存</p>\n<p>使用CRC校验对数据进行全链路保护</p>\n</li>\n</ul>\n</li>\n<li><p>系统异常</p>\n<p>Linux系统相对稳定，但是本身的机制可能会引起一些异常</p>\n<ul>\n<li>时钟源 – 存在时钟跳变的问题</li>\n<li>memcache刷数据存在问题，会影响其他磁盘</li>\n</ul>\n</li>\n<li><p>热点</p>\n</li>\n<li><p>软件缺陷</p>\n</li>\n<li><p>误操作</p>\n<p>关键目录进行保护，设置为不可修改/不可删除</p>\n</li>\n</ol>\n<h2 id=\"3-常见分布式系统\"><a href=\"#3-常见分布式系统\" class=\"headerlink\" title=\"3. 常见分布式系统\"></a>3. 常见分布式系统</h2><p>常见分布式系统</p>\n<p>HDFS</p>\n<p>Ceph</p>\n<p>Pangu</p>\n<p>其他</p>\n<p>​    GPFS </p>\n<p>​    Lustre </p>\n<p>​    MooseFS</p>\n<h2 id=\"4-分布式设计要点\"><a href=\"#4-分布式设计要点\" class=\"headerlink\" title=\"4. 分布式设计要点\"></a>4. 分布式设计要点</h2><p>读写流程</p>\n<p>Qos (服务质量)</p>\n<p>Checksum (文件正确性)</p>\n<p>Replication (复制)</p>\n<p>Rebalance (平衡)</p>\n<p>Garbage Collection (GC)</p>\n<p>Erasure Coding (成本相关)</p>\n<h2 id=\"5-分布式系统功能设计-写入流程\"><a href=\"#5-分布式系统功能设计-写入流程\" class=\"headerlink\" title=\"5. 分布式系统功能设计-写入流程\"></a>5. 分布式系统功能设计-写入流程</h2><h3 id=\"链式写入流程\"><a href=\"#链式写入流程\" class=\"headerlink\" title=\"链式写入流程\"></a>链式写入流程</h3><p><img src=\"/2017/07/18/technology-and-realization-of-distributed-file-storage-system/lianshi.png\" alt=\"链式写入\"></p>\n<blockquote>\n<p>作用:有利于从集群外部导入数据到集群内部，网络流量充分被利用。</p>\n<p>弊端：会产生三段网络的延迟</p>\n</blockquote>\n<h3 id=\"组从模式\"><a href=\"#组从模式\" class=\"headerlink\" title=\"组从模式\"></a>组从模式</h3><p><img src=\"/2017/07/18/technology-and-realization-of-distributed-file-storage-system/zhucong.png\" alt=\"组从模式\"></p>\n<p>减短了传递的延迟</p>\n<blockquote>\n<p>使用辐射发包方式，导致Primary网络最高利用率是1/2，对于流量较高的应用是不合适的。</p>\n<p>对于流量较低的应用较合适。</p>\n</blockquote>\n<h3 id=\"链式异常写入流程\"><a href=\"#链式异常写入流程\" class=\"headerlink\" title=\"链式异常写入流程\"></a>链式异常写入流程</h3><p><img src=\"/2017/07/18/technology-and-realization-of-distributed-file-storage-system/lianshi_yichang.png\" alt=\"链式异常写入\"></p>\n<p>降低数据安全性</p>\n<p>保证数据成功率</p>\n<p><img src=\"/2017/07/18/technology-and-realization-of-distributed-file-storage-system/lianshi_yichang_1.png\" alt=\"链式异常写入\"></p>\n<p>保证数据安全性</p>\n<p>降低数据成功率</p>\n<h4 id=\"Seal-and-New\"><a href=\"#Seal-and-New\" class=\"headerlink\" title=\"Seal and New\"></a>Seal and New</h4><p><img src=\"/2017/07/18/technology-and-realization-of-distributed-file-storage-system/lianshi_yichang_2.png\" alt=\"链式异常写入\"></p>\n<h3 id=\"数据写入流程总结\"><a href=\"#数据写入流程总结\" class=\"headerlink\" title=\"数据写入流程总结\"></a>数据写入流程总结</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">数据写入方式</th>\n<th style=\"text-align:left\">优点</th>\n<th>不足</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">链式写入</td>\n<td style=\"text-align:left\">每个节点负载和流量比较均衡</td>\n<td>链条过长，出现异常时诊断和修复过程比较复杂</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">主从写入</td>\n<td style=\"text-align:left\">总路径较短，管理逻辑由主节点负责</td>\n<td>主节点由可能成为负责和流量瓶颈</td>\n</tr>\n</tbody>\n</table>\n<p>不同的应用场景，使用不同的写入方式</p>\n<table>\n<thead>\n<tr>\n<th>异常处理方式</th>\n<th>优点</th>\n<th>不足</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>重新修复</td>\n<td>最大程度保留之前写入的数据</td>\n<td>- 直接剔除异常节点会导致后续写入的replica数降低 / - 如果补充新的replca进来，需要补齐之前写入的数据给新的replica</td>\n</tr>\n<tr>\n<td>Seal and New</td>\n<td>简单快速，可以绕过异常节点</td>\n<td>Chunk长度不固定，需要更多的meta管理</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"6-分布式系统功能设计-读取流程\"><a href=\"#6-分布式系统功能设计-读取流程\" class=\"headerlink\" title=\"6. 分布式系统功能设计-读取流程\"></a>6. 分布式系统功能设计-读取流程</h2><p>BackupRead 解决慢节点</p>\n<p>发起多个请求，可以把慢节点完全规避掉。在平均延迟都增大的情况，会出现问题。</p>\n<p>读流程优化-规避慢节点</p>\n<p>有效地发现集群中最快的节点</p>\n<p>可有效规避慢节点，对集群中的热点做到动态规划</p>\n<p>多个副本分布方式：</p>\n<p>可读取任意有效副本</p>\n<p>副本出现异常时尝其他副本</p>\n<p>Backup Read可减少读取延迟</p>\n<p>根据局部性原理，选取最优副本访问</p>\n<h2 id=\"7-分布式系统功能设计-QoS\"><a href=\"#7-分布式系统功能设计-QoS\" class=\"headerlink\" title=\"7. 分布式系统功能设计-QoS\"></a>7. 分布式系统功能设计-QoS</h2><p>按优先级划分IO</p>\n<p>区分用户</p>\n<h2 id=\"8-分布式系统功能设计-Checksum\"><a href=\"#8-分布式系统功能设计-Checksum\" class=\"headerlink\" title=\"8. 分布式系统功能设计-Checksum\"></a>8. 分布式系统功能设计-Checksum</h2><p>CRC校验</p>\n<p>全链路保护</p>\n<h2 id=\"9-分布式系统功能设计-Replication\"><a href=\"#9-分布式系统功能设计-Replication\" class=\"headerlink\" title=\"9. 分布式系统功能设计-Replication\"></a>9. 分布式系统功能设计-Replication</h2><h2 id=\"10-分布式系统功能设计-Rebalance\"><a href=\"#10-分布式系统功能设计-Rebalance\" class=\"headerlink\" title=\"10. 分布式系统功能设计-Rebalance\"></a>10. 分布式系统功能设计-Rebalance</h2><h2 id=\"11-分布式系统功能设计-GC\"><a href=\"#11-分布式系统功能设计-GC\" class=\"headerlink\" title=\"11. 分布式系统功能设计-GC\"></a>11. 分布式系统功能设计-GC</h2><h2 id=\"12-分布式系统功能设计-Erasure-Coding\"><a href=\"#12-分布式系统功能设计-Erasure-Coding\" class=\"headerlink\" title=\"12. 分布式系统功能设计-Erasure Coding\"></a>12. 分布式系统功能设计-Erasure Coding</h2><h2 id=\"13-元数据管理的高可用性\"><a href=\"#13-元数据管理的高可用性\" class=\"headerlink\" title=\"13. 元数据管理的高可用性\"></a>13. 元数据管理的高可用性</h2><h2 id=\"14-元数据管理的可扩展性\"><a href=\"#14-元数据管理的可扩展性\" class=\"headerlink\" title=\"14. 元数据管理的可扩展性\"></a>14. 元数据管理的可扩展性</h2><h2 id=\"15-数据混合存储\"><a href=\"#15-数据混合存储\" class=\"headerlink\" title=\"15. 数据混合存储\"></a>15. 数据混合存储</h2>","categories":[],"tags":[]},{"title":"迁移虚拟机失败并显示错误：pbm error occurred during pre migrate check callback: connection refused","url":"https://cosysn.github.io/2017/07/17/esxi-migrate-vm-failed-with-pbm-error-occurred/","content":"<h1 id=\"0-问题描述\"><a href=\"#0-问题描述\" class=\"headerlink\" title=\"0. 问题描述\"></a>0. 问题描述</h1><p>冷迁移虚拟机时出现下面的错误：</p>\n<p><img src=\"/2017/07/17/esxi-migrate-vm-failed-with-pbm-error-occurred/migrate_fail.png\" alt=\"\"></p>\n<p>需要解决这个迁移虚拟机失败的问题。</p>\n<h1 id=\"1-问题分析\"><a href=\"#1-问题分析\" class=\"headerlink\" title=\"1. 问题分析\"></a>1. 问题分析</h1><p>查询资料发现pbm error occurred during pre migrate check callback: connection refused这个错误是因为vmware-sps服务没有开启导致的。</p>\n<p><a href=\"http://blog.jamesblakeley.ca/?p=75\" target=\"_blank\" rel=\"external\">A general system occured: PBM error occurred during PreMigrateCheckCallback: Connection refused</a></p>\n<p><a href=\"https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=2124969\" target=\"_blank\" rel=\"external\">克隆虚拟机失败并显示错误：A general system error occurred:在 PreCloneCheckCallback 过程中出现 PBM 错误 (2124969)</a><a href=\"http://vinfrastructure.it/2016/01/issue-with-vmotion-pbm-error/\" target=\"_blank\" rel=\"external\">Issue with vMotion: PBM error during pre-check</a></p>\n<p>那么登陆到vcenter上查询vmware-sps服务有没有开启</p>\n<p><img src=\"/2017/07/17/esxi-migrate-vm-failed-with-pbm-error-occurred/esxi_vmware_sps.png\" alt=\"\"></p>\n<p>查询后发现vmware-sps服务确实没有开启</p>\n<h1 id=\"2-问题解决\"><a href=\"#2-问题解决\" class=\"headerlink\" title=\"2. 问题解决\"></a>2. 问题解决</h1><p>那么该问题的解决办法：</p>\n<p><img src=\"/2017/07/17/esxi-migrate-vm-failed-with-pbm-error-occurred/esxi_slove.jpg\" alt=\"\"></p>\n<p>直接重启vmware-sps服务即可。</p>\n<p><img src=\"/2017/07/17/esxi-migrate-vm-failed-with-pbm-error-occurred/esxi_vmware_sps_restart.png\" alt=\"\"></p>\n<p>vmeare-sps服务重启之后，再重新迁移虚拟机，发现迁移虚拟机正常，不会再报错</p>\n<p>开始迁移虚拟机：</p>\n<p><img src=\"/2017/07/17/esxi-migrate-vm-failed-with-pbm-error-occurred/migrate_start.png\" alt=\"\"></p>\n<p>迁移虚拟机完成：</p>\n<p><img src=\"/2017/07/17/esxi-migrate-vm-failed-with-pbm-error-occurred/migrate_finish.png\" alt=\"\"></p>\n<h1 id=\"3-经验总结\"><a href=\"#3-经验总结\" class=\"headerlink\" title=\"3. 经验总结\"></a>3. 经验总结</h1><ol>\n<li>善用搜索引擎，不要重复解决别人已经解决的问题；</li>\n</ol>\n<h1 id=\"4-参考文献\"><a href=\"#4-参考文献\" class=\"headerlink\" title=\"4. 参考文献\"></a>4. 参考文献</h1><ol>\n<li><a href=\"http://blog.jamesblakeley.ca/?p=75\" target=\"_blank\" rel=\"external\">A general system occured: PBM error occurred during PreMigrateCheckCallback: Connection refused</a></li>\n<li><a href=\"https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=2124969\" target=\"_blank\" rel=\"external\">克隆虚拟机失败并显示错误：A general system error occurred:在 PreCloneCheckCallback 过程中出现 PBM 错误 (2124969)</a><a href=\"http://vinfrastructure.it/2016/01/issue-with-vmotion-pbm-error/\" target=\"_blank\" rel=\"external\">Issue with vMotion: PBM error during pre-check</a></li>\n</ol>\n","categories":[],"tags":[]},{"title":"Hexo自动生成的RSS中出现中文乱码","url":"https://cosysn.github.io/2017/07/17/hexo-chinese-unintelligible-text/","content":"<h1 id=\"Hexo自动生成的RSS中出现中文乱码\"><a href=\"#Hexo自动生成的RSS中出现中文乱码\" class=\"headerlink\" title=\"Hexo自动生成的RSS中出现中文乱码\"></a>Hexo自动生成的RSS中出现中文乱码</h1><h2 id=\"0-问题描述\"><a href=\"#0-问题描述\" class=\"headerlink\" title=\"0. 问题描述\"></a>0. 问题描述</h2><p>添加了hexo-generator-feed插件后自动生成RSS，但是在生成的atom.xml文件中如果存在中文的话，就会出现乱码，导致订阅RSS功能会出现异常。下面截取部分出现问题的atom.xml：</p>\n<p><img src=\"/2017/07/17/hexo-chinese-unintelligible-text/atom_chinese_unicode_num.png\" alt=\"\"></p>\n<p>这个问题比较严重，需要解决。</p>\n<h2 id=\"1-问题分析\"><a href=\"#1-问题分析\" class=\"headerlink\" title=\"1. 问题分析\"></a>1. 问题分析</h2><ol>\n<li><p>首先在hexo-generator-feed中添加调试信息，然后复现该问题，确认是否是hexo-genrator-feed引起的异常。</p>\n<p><img src=\"/2017/07/17/hexo-chinese-unintelligible-text/atom_debug_code.png\" alt=\"\"></p>\n</li>\n<li><p>复现后，查看打印的调试信息</p>\n<p><img src=\"/2017/07/17/hexo-chinese-unintelligible-text/atom_xxx.png\" alt=\"\"></p>\n<p>可以看到很多乱码，而且发现是在hexo-generator-feed这个插件在处理之前就是乱码了，因此这些乱码不是这个插件处理有问题导致的。</p>\n<p><a href=\"https://hexo.io/api/locals.html\" target=\"_blank\" rel=\"external\">Local Variables</a></p>\n</li>\n<li><p>那么排除了这个插件的嫌疑点之后，那谁才是导致出现这个问题的罪魁祸首呢。</p>\n<p>我开始怀疑，是不是hexo在处理markdown生成相应的html文档时存在问题，导致生成的html文档就存在乱码。</p>\n<p>我找到了生成的html文档，发现生成的html文档中确实存在乱码，下面截取一部分片段：</p>\n<p><img src=\"/2017/07/17/hexo-chinese-unintelligible-text/generator_html.png\" alt=\"\"></p>\n<p>那么在这里就可以确定是hexo生成html文档时出现问题，导致生成的html文档中存在乱码。</p>\n</li>\n<li><p>但是hexo生成html时，调用了很多插件，很难确定导致问题的原因。那么首先到网上去查询一下是否存在类似的问题，查询后发现有很多类似的问题，大多都跟文档的编码设置不正确有关。</p>\n<p><a href=\"http://www.cognize.me/2014/10/31/hexoluanma/\" target=\"_blank\" rel=\"external\">解决hexo博客的乱码问题</a></p>\n<p>但是我将所有的博客的编码都设置为utf-8，尝试多次之后都无法解决这个问题，我开始怀疑可能跟文件的编码没有关系。</p>\n</li>\n<li><p>后面的hexo的问题库中找到了问题的原因，是因为<a href=\"https://github.com/cheeriojs/cheerio\" target=\"_blank\" rel=\"external\">cheerio</a>库存在编码处理的问题，而使用了hexo-asset-image这个插件，插件中使用了cheerio导致的。</p>\n<ul>\n<li><a href=\"https://github.com/hexojs/hexo/issues/657\" target=\"_blank\" rel=\"external\">網頁能正常顯示中文，但查看HTML源代碼卻出現亂碼……</a></li>\n<li><a href=\"https://github.com/PaicHyperionDev/hexo-generator-search/issues/13\" target=\"_blank\" rel=\"external\">中文转码问题 #13</a></li>\n<li><a href=\"https://github.com/bubkoo/hexo-toc/pull/15\" target=\"_blank\" rel=\"external\">let cheerio do not decode entities #15</a></li>\n<li><a href=\"https://github.com/cheeriojs/cheerio/issues/565\" target=\"_blank\" rel=\"external\">.html() method returns html with UNICODE when Chinese words are passed </a></li>\n<li><a href=\"https://github.com/CodeFalling/hexo-asset-image/issues/12\" target=\"_blank\" rel=\"external\">中文编码问题 #12</a></li>\n</ul>\n<p>上面这些链接都是有这个原因导致的问题。</p>\n</li>\n<li><p>分析到这里，问题的原因已经清楚了，下面将讲述如何解决这个问题。</p>\n</li>\n</ol>\n<h2 id=\"2-问题解决\"><a href=\"#2-问题解决\" class=\"headerlink\" title=\"2. 问题解决\"></a>2. 问题解决</h2><p>查询hexo-asset-image的问题单库，发现该问题已经在 <a href=\"https://github.com/CodeFalling/hexo-asset-image/issues/12\" target=\"_blank\" rel=\"external\">中文编码问题 #12</a> 中解决了，其解决的代码如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $ = cheerio.load(data[key], &#123;</div><div class=\"line\">       <span class=\"attr\">ignoreWhitespace</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">       <span class=\"attr\">xmlMode</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">       <span class=\"attr\">lowerCaseTags</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">       <span class=\"attr\">decodeEntities</span>: <span class=\"literal\">false</span> <span class=\"comment\">// 解决问题的关键</span></div><div class=\"line\">     &#125;);</div></pre></td></tr></table></figure>\n<p>既然hexo-assert-image最新的版本已经解决了这个问题，我就想直接升级hexo-assert-image来解决这个问题。</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update hexo-<span class=\"keyword\">assert</span>-<span class=\"built_in\">image</span></div></pre></td></tr></table></figure>\n<p>使用上述命令升级hexo-assert-image后发现问题没有解决，应该是作者在修改了这个问题后，没有及时将修改发布到npm当中，导致使用npm无法更新到最新版本。</p>\n<p>使用npm无法更新hexo-assert-image库，后面找到npm可以直接使用github安装库。其升级步骤如下：</p>\n<ol>\n<li><p>卸载老版本的hexo-assert-image函数库</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm uninstall hexo-<span class=\"keyword\">assert</span>-<span class=\"built_in\">image</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>npm直接安装github上的hexo-assert-image函数库</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">npm</span> install git+ssh:<span class=\"regexp\">//gi</span>t@github.com:CodeFalling/hexo-asset-image.git</div></pre></td></tr></table></figure>\n</li>\n<li><p>hexo重新生成静态博客</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo clean</span></div><div class=\"line\">hexo g</div></pre></td></tr></table></figure>\n</li>\n<li><p>检查重新生成后的网页，发现问题已经解决，没有发现乱码</p>\n<p><img src=\"/2017/07/17/hexo-chinese-unintelligible-text/generator_cor_html.png\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"3-经验总结\"><a href=\"#3-经验总结\" class=\"headerlink\" title=\"3. 经验总结\"></a>3. 经验总结</h2><ol>\n<li>合理利用hexo的问题库，如果能够找到别人已经解决的问题，这样自己就可以少走一些弯路。</li>\n<li>大胆假设，小心求证。</li>\n</ol>\n<h2 id=\"4-参考文献\"><a href=\"#4-参考文献\" class=\"headerlink\" title=\"4. 参考文献\"></a>4. 参考文献</h2><ol>\n<li><a href=\"http://www.cognize.me/2014/10/31/hexoluanma/\" target=\"_blank\" rel=\"external\">解决hexo博客的乱码问题</a></li>\n<li><a href=\"https://github.com/hexojs/hexo/issues/657\" target=\"_blank\" rel=\"external\">網頁能正常顯示中文，但查看HTML源代碼卻出現亂碼……</a></li>\n<li><a href=\"https://github.com/PaicHyperionDev/hexo-generator-search/issues/13\" target=\"_blank\" rel=\"external\">中文转码问题 #13</a></li>\n<li><a href=\"https://github.com/bubkoo/hexo-toc/pull/15\" target=\"_blank\" rel=\"external\">let cheerio do not decode entities #15</a></li>\n<li><a href=\"https://github.com/cheeriojs/cheerio/issues/565\" target=\"_blank\" rel=\"external\">.html() method returns html with UNICODE when Chinese words are passed </a></li>\n<li><a href=\"https://github.com/CodeFalling/hexo-asset-image/issues/12\" target=\"_blank\" rel=\"external\">中文编码问题 #12</a></li>\n<li><a href=\"http://www.cnblogs.com/so-letitgo/p/5833595.html\" target=\"_blank\" rel=\"external\">npm 安装远程包（github的）</a></li>\n<li><a href=\"https://segmentfault.com/q/1010000006244639\" target=\"_blank\" rel=\"external\">npm如何安装github里的指定分支</a></li>\n<li><a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">CodeFalling/hexo-asset-image</a></li>\n<li><a href=\"http://blog.csdn.net/melordljm/article/details/51985157\" target=\"_blank\" rel=\"external\">Hexo高级教程之插件开发</a></li>\n</ol>\n","categories":[],"tags":[]},{"title":"readfree.me自动签到脚本","url":"https://cosysn.github.io/2017/07/17/readfree-auto-sig-implement/","content":"<h1 id=\"readfree-me自动签到脚本\"><a href=\"#readfree-me自动签到脚本\" class=\"headerlink\" title=\"readfree.me自动签到脚本\"></a>readfree.me自动签到脚本</h1><h2 id=\"0-前言\"><a href=\"#0-前言\" class=\"headerlink\" title=\"0. 前言\"></a>0. 前言</h2><p>我们要知道readfree.me网站的签到规则，查询readfree的论坛找到自动签到获取积分的方法，就是在每天第一次访问网站时，会跳转到亚马逊，此时就完成了签到。</p>\n<p>该签到规则是来自于<a href=\"http://forum.readfree.me/t/readfree/302\" target=\"_blank\" rel=\"external\">【重要】readfree额度规则变更通知</a> ，其具体的规则如下：</p>\n<blockquote>\n<ul>\n<li>Free用户通过每日签到，随机获取1-3个额度，且可累计。</li>\n<li>对Free用户的额度规则也适用于Pro用户，不过Pro用户的签到是在后台自动完成，无需跳转到亚马逊。</li>\n</ul>\n<ul>\n<li>签到是自动的，在你每天第一次访问网站时，会跳转到亚马逊，此时就完成了签到，你自己不需要做任何操作。</li>\n</ul>\n</blockquote>\n<p>因此只要能够实现自动登录功能，然后每天自动登录一次，就可以实现自动签到功能。</p>\n<h2 id=\"1-自动登录实现分析\"><a href=\"#1-自动登录实现分析\" class=\"headerlink\" title=\"1. 自动登录实现分析\"></a>1. 自动登录实现分析</h2><p>首先想到的是使用post模拟登录网站的过程，以实现自动签到的功能。</p>\n<p>直接查看登录页面，获取登录表单的代码，其代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id_signin_form\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"csrfmiddlewaretoken\"</span>  <span class=\"attr\">value</span>=<span class=\"string\">\"Mjh1RrCC6VJzOdIbOfD4f99H5YEas287oltY0ve4H7BtqiqzRtMcMUpRkai4g9O3\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"id_email\"</span>&gt;</span>邮箱:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">required</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id_email\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"id_password\"</span>&gt;</span>密码:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">required</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id_password\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"id_captcha_1\"</span>&gt;</span>认证码:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/captcha/image/1c84bab76745e92b7b856d05698f781bc5c8aa54/\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"captcha\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"captcha\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id_captcha_0\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"captcha_0\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1c84bab76745e92b7b856d05698f781bc5c8aa54\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">autocapitalize</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">autocorrect</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">spellcheck</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id_captcha_1\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"captcha_1\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></div><div class=\"line\">&nbsp</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-actions\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary btn-large\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-ok icon-white\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>从上述表单中可以看到登录readfree会提交如下数据：</p>\n<ul>\n<li>邮箱</li>\n<li>密码</li>\n<li>csrf验证</li>\n<li>验证码</li>\n</ul>\n<p>其中邮箱、密码和csrf验证都比较好获取，因为在网页中可以直接获取到值，主要困难的是如何获取到验证码的值。</p>\n<p>通过查询资料，发现还有一种更加简单的方法，直接使用登录后的cookie访问网站，可以绕过验证码。</p>\n<p>使用chrome抓取登录时的http请求，在登录成功的页面上找到Request Headers，其中Cookie字段的值就是登录时使用的Cookie值:</p>\n<p><img src=\"/2017/07/17/readfree-auto-sig-implement/readfree_request_headers_cookie.png\" alt=\"readfree_request_headers_cookie\"></p>\n<p>分析一下Cookie的值其结果如下：</p>\n<p><img src=\"/2017/07/17/readfree-auto-sig-implement/cookie_table.png\" alt=\"cookie_table\"></p>\n<p>从上表可以看到，其总共包含6个字段，其中sessionid应该是表示用户登录的唯一标识。获取到了cookie的值后，就可以使用该cookie进行登录了。</p>\n<p>Cookie的过期时间，通过抓取到的报文，可以获得cookie是什么时候能会过期。expires 代表 cookie 过期时间，这个属性有些过时。Max-Age 作为替代，代表cookie的生存期，以秒为单位。</p>\n<p><img src=\"/2017/07/17/readfree-auto-sig-implement/request_header.png\" alt=\"request_header\"></p>\n<p>可以看到Cookie的超期时间是1年，那么我们就可以安心的使用1年自动登录的脚本，而不用频繁的更换cookie。</p>\n<h2 id=\"2-代码实现\"><a href=\"#2-代码实现\" class=\"headerlink\" title=\"2. 代码实现\"></a>2. 代码实现</h2><p>通过python的requests发送登录请求，其代码实现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\">    </div><div class=\"line\">url=<span class=\"string\">'http://readfree.me/accounts/checkin'</span></div><div class=\"line\">cookie_str=<span class=\"string\">''</span></div><div class=\"line\">    </div><div class=\"line\">logging.basicConfig(level=logging.INFO,</div><div class=\"line\">                    filename=<span class=\"string\">'/var/log/readfree_auto_sig.log'</span>,</div><div class=\"line\">                    filemode=<span class=\"string\">'a'</span>,</div><div class=\"line\">                    format=<span class=\"string\">'%(asctime)s - [line:%(lineno)d] - %(levelname)s: %(message)s'</span>)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    </div><div class=\"line\">    cookies=&#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> ck <span class=\"keyword\">in</span> cookie_str.split(<span class=\"string\">';'</span>):</div><div class=\"line\">        name,value=ck.strip().split(<span class=\"string\">'='</span>,<span class=\"number\">1</span>)</div><div class=\"line\">        cookies[name]=value</div><div class=\"line\">    </div><div class=\"line\">    logging.info(<span class=\"string\">'start to sign ...'</span>)</div><div class=\"line\">    ret=requests.get(url, cookies=cookies)</div><div class=\"line\">    logging.info(<span class=\"string\">'sign %s'</span>%ret)</div></pre></td></tr></table></figure>\n<h2 id=\"3-测试结果\"><a href=\"#3-测试结果\" class=\"headerlink\" title=\"3. 测试结果\"></a>3. 测试结果</h2><p>使用Crontab设置定时任务，每天早上2点自动登录readfree.me网站，实现自动签到功能。</p>\n<p>下面是3天的测试结果：</p>\n<p><img src=\"/2017/07/17/readfree-auto-sig-implement/readfree_auto_sig_test_result.png\" alt=\"测试结果\"></p>\n<p>执行readfree.py打印的日志如下：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZuf66fsxeqvr0ak92q63iZ ~]# <span class=\"keyword\">cat</span> /var/<span class=\"built_in\">log</span>/readfree_auto_sig.<span class=\"built_in\">log</span> </div><div class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">13</span> <span class=\"number\">01</span>:<span class=\"number\">20</span>:<span class=\"number\">25</span>,<span class=\"number\">415</span> - [<span class=\"built_in\">line</span>:<span class=\"number\">19</span>] - INFO: start <span class=\"keyword\">to</span> <span class=\"keyword\">sign</span> ...</div><div class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">13</span> <span class=\"number\">01</span>:<span class=\"number\">20</span>:<span class=\"number\">26</span>,<span class=\"number\">286</span> - [<span class=\"built_in\">line</span>:<span class=\"number\">21</span>] - INFO: <span class=\"keyword\">sign</span> &lt;Response [<span class=\"number\">200</span>]&gt;</div><div class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">13</span> <span class=\"number\">01</span>:<span class=\"number\">23</span>:<span class=\"number\">01</span>,<span class=\"number\">341</span> - [<span class=\"built_in\">line</span>:<span class=\"number\">19</span>] - INFO: start <span class=\"keyword\">to</span> <span class=\"keyword\">sign</span> ...</div><div class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">13</span> <span class=\"number\">01</span>:<span class=\"number\">23</span>:<span class=\"number\">01</span>,<span class=\"number\">964</span> - [<span class=\"built_in\">line</span>:<span class=\"number\">21</span>] - INFO: <span class=\"keyword\">sign</span> &lt;Response [<span class=\"number\">200</span>]&gt;</div><div class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">13</span> <span class=\"number\">01</span>:<span class=\"number\">24</span>:<span class=\"number\">02</span>,<span class=\"number\">135</span> - [<span class=\"built_in\">line</span>:<span class=\"number\">19</span>] - INFO: start <span class=\"keyword\">to</span> <span class=\"keyword\">sign</span> ...</div><div class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">13</span> <span class=\"number\">01</span>:<span class=\"number\">24</span>:<span class=\"number\">02</span>,<span class=\"number\">798</span> - [<span class=\"built_in\">line</span>:<span class=\"number\">21</span>] - INFO: <span class=\"keyword\">sign</span> &lt;Response [<span class=\"number\">200</span>]&gt;</div><div class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">13</span> <span class=\"number\">02</span>:<span class=\"number\">00</span>:<span class=\"number\">02</span>,<span class=\"number\">035</span> - [<span class=\"built_in\">line</span>:<span class=\"number\">19</span>] - INFO: start <span class=\"keyword\">to</span> <span class=\"keyword\">sign</span> ...</div><div class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">13</span> <span class=\"number\">02</span>:<span class=\"number\">00</span>:<span class=\"number\">02</span>,<span class=\"number\">731</span> - [<span class=\"built_in\">line</span>:<span class=\"number\">21</span>] - INFO: <span class=\"keyword\">sign</span> &lt;Response [<span class=\"number\">200</span>]&gt;</div><div class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">14</span> <span class=\"number\">02</span>:<span class=\"number\">00</span>:<span class=\"number\">01</span>,<span class=\"number\">824</span> - [<span class=\"built_in\">line</span>:<span class=\"number\">19</span>] - INFO: start <span class=\"keyword\">to</span> <span class=\"keyword\">sign</span> ...</div><div class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">14</span> <span class=\"number\">02</span>:<span class=\"number\">00</span>:<span class=\"number\">02</span>,<span class=\"number\">806</span> - [<span class=\"built_in\">line</span>:<span class=\"number\">21</span>] - INFO: <span class=\"keyword\">sign</span> &lt;Response [<span class=\"number\">200</span>]&gt;</div><div class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">15</span> <span class=\"number\">02</span>:<span class=\"number\">00</span>:<span class=\"number\">02</span>,<span class=\"number\">140</span> - [<span class=\"built_in\">line</span>:<span class=\"number\">19</span>] - INFO: start <span class=\"keyword\">to</span> <span class=\"keyword\">sign</span> ...</div><div class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">15</span> <span class=\"number\">02</span>:<span class=\"number\">00</span>:<span class=\"number\">03</span>,<span class=\"number\">277</span> - [<span class=\"built_in\">line</span>:<span class=\"number\">21</span>] - INFO: <span class=\"keyword\">sign</span> &lt;Response [<span class=\"number\">200</span>]&gt;</div><div class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">16</span> <span class=\"number\">02</span>:<span class=\"number\">00</span>:<span class=\"number\">02</span>,<span class=\"number\">751</span> - [<span class=\"built_in\">line</span>:<span class=\"number\">19</span>] - INFO: start <span class=\"keyword\">to</span> <span class=\"keyword\">sign</span> ...</div><div class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">16</span> <span class=\"number\">02</span>:<span class=\"number\">00</span>:<span class=\"number\">03</span>,<span class=\"number\">695</span> - [<span class=\"built_in\">line</span>:<span class=\"number\">21</span>] - INFO: <span class=\"keyword\">sign</span> &lt;Response [<span class=\"number\">200</span>]&gt;</div><div class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">17</span> <span class=\"number\">02</span>:<span class=\"number\">00</span>:<span class=\"number\">02</span>,<span class=\"number\">942</span> - [<span class=\"built_in\">line</span>:<span class=\"number\">19</span>] - INFO: start <span class=\"keyword\">to</span> <span class=\"keyword\">sign</span> ...</div><div class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">17</span> <span class=\"number\">02</span>:<span class=\"number\">00</span>:<span class=\"number\">03</span>,<span class=\"number\">738</span> - [<span class=\"built_in\">line</span>:<span class=\"number\">21</span>] - INFO: <span class=\"keyword\">sign</span> &lt;Response [<span class=\"number\">200</span>]&gt;</div></pre></td></tr></table></figure>\n<p>后续会跟踪一段时间，看看是否还存在其他的问题。</p>\n<h2 id=\"4-参考资料\"><a href=\"#4-参考资料\" class=\"headerlink\" title=\"4. 参考资料\"></a>4. 参考资料</h2><ol>\n<li><a href=\"http://www.cnblogs.com/yoyoketang/p/6838596.html\" target=\"_blank\" rel=\"external\">python接口自动化4-绕过验证码登录（cookie）</a></li>\n<li><a href=\"http://blog.csdn.net/alpha5/article/details/24964009\" target=\"_blank\" rel=\"external\">python requests的安装与简单运用</a></li>\n<li><a href=\"http://blog.csdn.net/winterto1990/article/details/51213029\" target=\"_blank\" rel=\"external\">python的requests在网络请求中添加cookies参数</a></li>\n<li><a href=\"https://segmentfault.com/q/1010000002902690\" target=\"_blank\" rel=\"external\">chrome浏览器怎么查看传入后台的POST的值？</a></li>\n</ol>\n","categories":[],"tags":[]},{"title":"little_and_big_endian","url":"https://cosysn.github.io/2017/02/07/little-and-big-endian/","content":"","categories":[],"tags":[]},{"title":"打开Windows集群虚拟机失败","url":"https://cosysn.github.io/2017/01/17/windows-cluster-open-virtual-machine-error/","content":"<h2 id=\"1-问题描述\"><a href=\"#1-问题描述\" class=\"headerlink\" title=\"1. 问题描述\"></a>1. 问题描述</h2><p>Windows Server 2012集群中的虚拟机打不开，如下图所示：</p>\n<p><img src=\"/2017/01/17/windows-cluster-open-virtual-machine-error/open_error.png\" alt=\"open err\"></p>\n<p>需要分析出问题出现的原因，并将虚拟机正常打开。</p>\n<h2 id=\"2-问题定位\"><a href=\"#2-问题定位\" class=\"headerlink\" title=\"2. 问题定位\"></a>2. 问题定位</h2><ol>\n<li><p>查看集群虚拟机的状态，其信息如下：<br><img src=\"/2017/01/17/windows-cluster-open-virtual-machine-error/res_info.png\" alt=\"res info\"></p>\n<p>从上图可以看出，虚拟机因为资源受限导致打开虚拟机失败，但是什么资源受限，并没有明确说明。</p>\n</li>\n<li><p>连接到虚拟机的控制台，如下图所示：<br><img src=\"/2017/01/17/windows-cluster-open-virtual-machine-error/vir_console.png\" alt=\"vir_consloe\"></p>\n</li>\n<li><p>在虚拟机的控制台上打开虚拟机，报内存不足的错误，如下图所示：<br><img src=\"/2017/01/17/windows-cluster-open-virtual-machine-error/mem_lack.png\" alt=\"mem_lack\"></p>\n</li>\n<li><p>将虚拟机的内存从4GB调小到1GB后，虚拟机能够正常打开，问题解决。</p>\n</li>\n</ol>\n<h2 id=\"3-问题总结\"><a href=\"#3-问题总结\" class=\"headerlink\" title=\"3. 问题总结\"></a>3. 问题总结</h2><p>这个问题并不是有多难，关键是我又掌握了一种定位虚拟机打开失败的方法，就在这里记录一下，方便以后查阅。<br>定位方法：</p>\n<ol>\n<li>打开虚拟机的控制台；</li>\n<li>打开虚拟机的电源，看是否会报错；</li>\n<li>如果会报错的话，根据报错原因进一步去定位问题；如果不会报错的话，就需要使用其他手段去定位该问题了。</li>\n</ol>\n","categories":[],"tags":[]},{"title":"Storage vMotion and the Mirror Driver","url":"https://cosysn.github.io/2017/01/14/storage-vmotion-and-the-mirror-driver/","content":"<p>在使用ESXi迁移虚拟机的时候，我在vmkernel.log中发现下面一段日志：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Line <span class=\"number\">2964</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T12:</span><span class=\"number\">59</span>:<span class=\"number\">29.720</span>Z <span class=\"string\">cpu17:</span><span class=\"number\">808643</span>)<span class=\"string\">SVM:</span> <span class=\"number\">5139</span>: SVM_MakeDev<span class=\"number\">.5139</span>: Creating device <span class=\"number\">10</span>a80a6<span class=\"number\">-819390</span>-<span class=\"string\">svmmirror:</span> Success</div><div class=\"line\">Line <span class=\"number\">2965</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T12:</span><span class=\"number\">59</span>:<span class=\"number\">29.720</span>Z <span class=\"string\">cpu17:</span><span class=\"number\">808643</span>)<span class=\"string\">SVM:</span> <span class=\"number\">5188</span>: Created device <span class=\"number\">10</span>a80a6<span class=\"number\">-819390</span>-svmmirror, primary <span class=\"number\">10</span>a80a6, secondary <span class=\"number\">819390</span></div><div class=\"line\">Line <span class=\"number\">3094</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">00</span>:<span class=\"number\">25.159</span>Z <span class=\"string\">cpu21:</span><span class=\"number\">34821</span>)<span class=\"string\">Vol3:</span> <span class=\"number\">2675</span>: Could not open device <span class=\"string\">'10a80a6-819390-svmmirror'</span> <span class=\"keyword\">for</span> <span class=\"string\">probing:</span> Busy</div><div class=\"line\">Line <span class=\"number\">3095</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">00</span>:<span class=\"number\">25.159</span>Z <span class=\"string\">cpu21:</span><span class=\"number\">34821</span>)<span class=\"string\">Vol3:</span> <span class=\"number\">1072</span>: Could not open device <span class=\"string\">'10a80a6-819390-svmmirror'</span> <span class=\"keyword\">for</span> volume <span class=\"string\">open:</span> Busy</div><div class=\"line\">Line <span class=\"number\">3096</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">00</span>:<span class=\"number\">25.159</span>Z <span class=\"string\">cpu21:</span><span class=\"number\">34821</span>)<span class=\"string\">Vol3:</span> <span class=\"number\">1072</span>: Could not open device <span class=\"string\">'10a80a6-819390-svmmirror'</span> <span class=\"keyword\">for</span> volume <span class=\"string\">open:</span> Busy</div><div class=\"line\">Line <span class=\"number\">3097</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">00</span>:<span class=\"number\">25.159</span>Z <span class=\"string\">cpu21:</span><span class=\"number\">34821</span>)<span class=\"string\">FSS:</span> <span class=\"number\">5327</span>: No FS driver claimed device <span class=\"string\">'10a80a6-819390-svmmirror'</span>: No filesystem on the device</div><div class=\"line\">Line <span class=\"number\">3643</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">07</span>:<span class=\"number\">32.032</span>Z <span class=\"string\">cpu22:</span><span class=\"number\">34821</span>)<span class=\"string\">Vol3:</span> <span class=\"number\">2675</span>: Could not open device <span class=\"string\">'10a80a6-819390-svmmirror'</span> <span class=\"keyword\">for</span> <span class=\"string\">probing:</span> Busy</div><div class=\"line\">Line <span class=\"number\">3644</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">07</span>:<span class=\"number\">32.032</span>Z <span class=\"string\">cpu22:</span><span class=\"number\">34821</span>)<span class=\"string\">Vol3:</span> <span class=\"number\">1072</span>: Could not open device <span class=\"string\">'10a80a6-819390-svmmirror'</span> <span class=\"keyword\">for</span> volume <span class=\"string\">open:</span> Busy</div><div class=\"line\">Line <span class=\"number\">3645</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">07</span>:<span class=\"number\">32.032</span>Z <span class=\"string\">cpu22:</span><span class=\"number\">34821</span>)<span class=\"string\">Vol3:</span> <span class=\"number\">1072</span>: Could not open device <span class=\"string\">'10a80a6-819390-svmmirror'</span> <span class=\"keyword\">for</span> volume <span class=\"string\">open:</span> Busy</div><div class=\"line\">Line <span class=\"number\">3646</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">07</span>:<span class=\"number\">32.032</span>Z <span class=\"string\">cpu22:</span><span class=\"number\">34821</span>)<span class=\"string\">FSS:</span> <span class=\"number\">5327</span>: No FS driver claimed device <span class=\"string\">'10a80a6-819390-svmmirror'</span>: No filesystem on the device</div><div class=\"line\">Line <span class=\"number\">4145</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">16</span>:<span class=\"number\">10.123</span>Z <span class=\"string\">cpu15:</span><span class=\"number\">34821</span>)<span class=\"string\">Vol3:</span> <span class=\"number\">2675</span>: Could not open device <span class=\"string\">'10a80a6-819390-svmmirror'</span> <span class=\"keyword\">for</span> <span class=\"string\">probing:</span> Busy</div><div class=\"line\">Line <span class=\"number\">4146</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">16</span>:<span class=\"number\">10.123</span>Z <span class=\"string\">cpu15:</span><span class=\"number\">34821</span>)<span class=\"string\">Vol3:</span> <span class=\"number\">1072</span>: Could not open device <span class=\"string\">'10a80a6-819390-svmmirror'</span> <span class=\"keyword\">for</span> volume <span class=\"string\">open:</span> Busy</div><div class=\"line\">Line <span class=\"number\">4147</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">16</span>:<span class=\"number\">10.123</span>Z <span class=\"string\">cpu15:</span><span class=\"number\">34821</span>)<span class=\"string\">Vol3:</span> <span class=\"number\">1072</span>: Could not open device <span class=\"string\">'10a80a6-819390-svmmirror'</span> <span class=\"keyword\">for</span> volume <span class=\"string\">open:</span> Busy</div><div class=\"line\">Line <span class=\"number\">4148</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">16</span>:<span class=\"number\">10.123</span>Z <span class=\"string\">cpu15:</span><span class=\"number\">34821</span>)<span class=\"string\">FSS:</span> <span class=\"number\">5327</span>: No FS driver claimed device <span class=\"string\">'10a80a6-819390-svmmirror'</span>: No filesystem on the device</div><div class=\"line\">Line <span class=\"number\">4849</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">25</span>:<span class=\"number\">12.841</span>Z <span class=\"string\">cpu9:</span><span class=\"number\">34803</span>)<span class=\"string\">Vol3:</span> <span class=\"number\">2675</span>: Could not open device <span class=\"string\">'10a80a6-819390-svmmirror'</span> <span class=\"keyword\">for</span> <span class=\"string\">probing:</span> Busy</div><div class=\"line\">Line <span class=\"number\">4850</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">25</span>:<span class=\"number\">12.842</span>Z <span class=\"string\">cpu9:</span><span class=\"number\">34803</span>)<span class=\"string\">Vol3:</span> <span class=\"number\">1072</span>: Could not open device <span class=\"string\">'10a80a6-819390-svmmirror'</span> <span class=\"keyword\">for</span> volume <span class=\"string\">open:</span> Busy</div><div class=\"line\">Line <span class=\"number\">4851</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">25</span>:<span class=\"number\">12.842</span>Z <span class=\"string\">cpu9:</span><span class=\"number\">34803</span>)<span class=\"string\">Vol3:</span> <span class=\"number\">1072</span>: Could not open device <span class=\"string\">'10a80a6-819390-svmmirror'</span> <span class=\"keyword\">for</span> volume <span class=\"string\">open:</span> Busy</div><div class=\"line\">Line <span class=\"number\">4852</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">25</span>:<span class=\"number\">12.842</span>Z <span class=\"string\">cpu9:</span><span class=\"number\">34803</span>)<span class=\"string\">FSS:</span> <span class=\"number\">5327</span>: No FS driver claimed device <span class=\"string\">'10a80a6-819390-svmmirror'</span>: No filesystem on the device</div><div class=\"line\">Line <span class=\"number\">5021</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">27</span>:<span class=\"number\">20.668</span>Z <span class=\"string\">cpu16:</span><span class=\"number\">808643</span>)<span class=\"string\">SVM:</span> <span class=\"number\">2428</span>: SVM Mirrored mode IO stats <span class=\"keyword\">for</span> <span class=\"string\">device:</span> <span class=\"number\">10</span>a80a6<span class=\"number\">-819390</span>-svmmirror</div><div class=\"line\">Line <span class=\"number\">5024</span>: <span class=\"number\">2016</span><span class=\"number\">-05</span><span class=\"number\">-19</span><span class=\"string\">T13:</span><span class=\"number\">27</span>:<span class=\"number\">20.668</span>Z <span class=\"string\">cpu16:</span><span class=\"number\">808643</span>)<span class=\"string\">SVM:</span> <span class=\"number\">2450</span>: Destroyed device <span class=\"number\">10</span>a80a6<span class=\"number\">-819390</span>-svmmirror</div></pre></td></tr></table></figure></p>\n<p>有很多<code>10a80a6-819390-svmmirror busy</code>的打印，当时从这里能够找到一些线索，于是到查找<code>svmmirror</code>相关的资料，发现找到一些有用的资料，虽然没有从<code>svmmirror</code>中得到更多的线索，但是对于<code>ESXi</code>的<code>Storage vMotion</code>有了更深的理解。</p>\n<p><code>Svmmirror</code>是由<code>mirror driver</code>实现的，下面我就简单介绍一下<code>mirror driver</code>：</p>\n<p><code>Mirror Mode</code>是在<code>vSphere 5.0</code>合入到<code>Storage vMotion</code>的一个新特性，它能够让<code>Storage vMotion</code>更快、更高效。</p>\n<p>在<code>Storage vMotion</code>迁移虚拟机过程中会遇到一个的问题：拷贝虚拟机的虚拟磁盘时，部分数据块已经拷贝到目的磁盘，当正在运行过程中的虚拟机向已经被拷贝到目的磁盘所在的数据块中写数据，那么如何将修改后的数据块同步到目的磁盘保证数据的一致性？</p>\n<p><code>Storage vMotion</code>提出了很多办法来解决这个问题：</p>\n<ol>\n<li>快照技术</li>\n<li><code>Change Block Tracking(CBT)</code></li>\n<li><code>Mirror Mode</code><br>其中<code>Mirror Mode</code>的性能最好。其工作原理很简单，就是将I/O做下镜像。换句话说，当一个正在进行<code>Storage vMotio</code>n的虚拟机要写数据到虚拟机磁盘当中，写数据的I/O会同时向源磁盘和目的磁盘下发，只有当源磁盘和目的磁盘都写成功之后才会通知虚拟机I/O已完成。 </li>\n</ol>\n<p><code>Mirror Mode</code>对于迁移虚拟机的性能提升是非常巨大的，详情请参考这个<a href=\"https://www.usenix.org/legacy/events/atc11/tech/final_files/Mashtizadeh.pdf\" target=\"_blank\" rel=\"external\">论文</a>。</p>\n<p>了解完了<code>Mirror Mode</code>，那么我们看看对<code>Storage vMotion</code>迁移流程的影响：</p>\n<ol>\n<li>由<code>VPXA</code>将虚拟机的工作目录拷贝到目的磁盘上；</li>\n<li>使用拷贝过去的文件在目标磁盘上创建并启动“影子”虚拟机，这个虚拟机会处于空闲状态并等待拷贝数据完成。为防止虚拟机的工作目录被转移，虚拟机被创建为失效保护模式；</li>\n<li><code>Storage vMotion</code>启动<code>Mirror Driver</code>将已拷贝到目的磁盘的数据镜像写入源和目标磁盘；</li>\n<li>经过一轮拷贝，使用镜像<code>I/O</code>就可以将虚拟机的磁盘文档完整的拷贝到目的磁盘上。</li>\n<li><code>Storage vMotion</code>调用虚拟机的快速挂起和恢复（类似于<code>vMotion</code>），将正在运行的虚拟机转移到空闲影子虚拟机。</li>\n<li>在快速挂起和恢复完成后，旧的工作目录和虚拟磁盘文件将从源磁盘中删除。</li>\n</ol>\n<p>然后我通过测试<code>Storage vMotion</code>过程中实际使用了<code>Mirror Mode</code>。打开虚拟机的日志文件，找打下面的打印：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2016</span><span class=\"bullet\">-05</span><span class=\"bullet\">-19</span><span class=\"attr\">T12:59:29.721Z|</span> <span class=\"string\">vcpu-0|</span> <span class=\"attr\">I120:</span> <span class=\"string\">DISKLIB-LIB_MISC</span>   <span class=\"string\">:</span> <span class=\"string\">Opening</span> <span class=\"string\">mirror</span> <span class=\"string\">node</span> <span class=\"string\">/vmfs/devices/svm/10a80a6-819390-svmmirror</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"bullet\">-05</span><span class=\"bullet\">-19</span><span class=\"attr\">T12:59:29.721Z|</span> <span class=\"string\">vcpu-0|</span> <span class=\"attr\">I120:</span> <span class=\"string\">Creating</span> <span class=\"string\">virtual</span> <span class=\"string\">dev</span> <span class=\"string\">for</span> <span class=\"attr\">scsi0:0</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"bullet\">-05</span><span class=\"bullet\">-19</span><span class=\"attr\">T12:59:29.721Z|</span> <span class=\"string\">vcpu-0|</span> <span class=\"attr\">I120:</span> <span class=\"attr\">DumpDiskInfo:</span> <span class=\"attr\">scsi0:0</span> <span class=\"string\">createType=11,</span> <span class=\"string\">capacity</span> <span class=\"string\">=</span> <span class=\"number\">33554432</span><span class=\"string\">,</span> <span class=\"string\">numLinks</span> <span class=\"string\">=</span> <span class=\"number\">1</span><span class=\"string\">,</span> <span class=\"string\">allocationType</span> <span class=\"string\">=</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"bullet\">-05</span><span class=\"bullet\">-19</span><span class=\"attr\">T12:59:29.721Z|</span> <span class=\"string\">vcpu-0|</span> <span class=\"attr\">I120:</span> <span class=\"attr\">SCSIDiskESXPopulateVDevDesc:</span> <span class=\"string\">Using</span> <span class=\"string\">FS</span> <span class=\"string\">backend</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"bullet\">-05</span><span class=\"bullet\">-19</span><span class=\"attr\">T12:59:29.721Z|</span> <span class=\"string\">vcpu-0|</span> <span class=\"attr\">I120:</span> <span class=\"attr\">DISKUTIL:</span> <span class=\"attr\">scsi0:0</span> <span class=\"string\">:</span> <span class=\"string\">geometry=2088/255/63</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"bullet\">-05</span><span class=\"bullet\">-19</span><span class=\"attr\">T12:59:29.723Z|</span> <span class=\"string\">vcpu-0|</span> <span class=\"attr\">I120:</span> <span class=\"string\">VMXNET3</span> <span class=\"attr\">user:</span> <span class=\"string\">Ethernet1</span> <span class=\"string\">Driver</span> <span class=\"attr\">Info:</span> <span class=\"string\">version</span> <span class=\"string\">=</span> <span class=\"number\">16778496</span> <span class=\"string\">gosBits</span> <span class=\"string\">=</span> <span class=\"number\">2</span> <span class=\"string\">gosType</span> <span class=\"string\">=</span> <span class=\"number\">1</span><span class=\"string\">,</span> <span class=\"string\">gosVer</span> <span class=\"string\">=</span> <span class=\"number\">0</span><span class=\"string\">,</span> <span class=\"string\">gosMisc</span> <span class=\"string\">=</span> <span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"bullet\">-05</span><span class=\"bullet\">-19</span><span class=\"attr\">T12:59:29.723Z|</span> <span class=\"string\">Worker#0|</span> <span class=\"attr\">I120:</span> <span class=\"attr\">SVMotion:</span> <span class=\"string\">Enter</span> <span class=\"string\">Phase</span> <span class=\"number\">8</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"bullet\">-05</span><span class=\"bullet\">-19</span><span class=\"attr\">T12:59:30.012Z|</span> <span class=\"string\">Worker#0|</span> <span class=\"attr\">I120:</span> <span class=\"string\">Disk/File</span> <span class=\"string\">copy</span> <span class=\"string\">started</span> <span class=\"string\">for</span> <span class=\"string\">/vmfs/volumes/5739734e-f309ac87-4491-f8bc123449c2/W1_2/W1_2.vmdk.</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"bullet\">-05</span><span class=\"bullet\">-19</span><span class=\"attr\">T12:59:35.681Z|</span> <span class=\"string\">vcpu-0|</span> <span class=\"attr\">I120:</span> <span class=\"attr\">HBACommon:</span> <span class=\"string\">First</span> <span class=\"string\">write</span> <span class=\"string\">on</span> <span class=\"attr\">scsi0:0.fileName='/vmfs/volumes/5739734e-f309ac87-4491-f8bc123449c2/W1_2/W1_2.vmdk'</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"bullet\">-05</span><span class=\"bullet\">-19</span><span class=\"attr\">T12:59:35.681Z|</span> <span class=\"string\">vcpu-0|</span> <span class=\"attr\">I120:</span> <span class=\"attr\">DDB:</span> <span class=\"string\">\"longContentID\"</span> <span class=\"string\">=</span> <span class=\"string\">\"40d56f2945fea90820e1995ff9f13b36\"</span> <span class=\"string\">(was</span> <span class=\"string\">\"31f679521f5e9755ae9f840e8c55ccfc\"</span><span class=\"string\">)</span></div></pre></td></tr></table></figure></p>\n","categories":[],"tags":[]},{"title":"Hexo博客支持图片","url":"https://cosysn.github.io/2017/01/14/hexo-blog-image/","content":"<p>之前写博客都是文字描述，今天在写文章需要引用图片时才发现我的博客不支持图片，无法将图片加载到博客当中去。 查询之后发现<a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">CodeFalling/hexo-asset-image</a>插件可以非常方便加载本地的图片。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><p>首先确认<code>_config.yml</code>中有<code>post_asset_folder:true</code>。<br>Assets指的是那些不在source目录下的资源，比如图片、CSS文件或者Javascript文件。Hexo提供一种更方便的方法来管理这些资源（Assets）。想使其生效，首先修改 post_asset_folder 字段的设置，将其值改为 true 。<br>当生效后，在你创建文章的时候，Hexo会创建一个同名目录，你可以将该文章关联的资源全部放到该目录下。这样就可以更加方便的使用它们了。</p>\n</li>\n<li><p>在Hexo目录下，使用npm安装hexo-asset-image</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-asset-<span class=\"built_in\">image</span> --<span class=\"built_in\">save</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>安装完成后，用Hexo新建文章的时候就会在_post目录下创建一个和文章名字相同的目录，该文章相关联的图片可以放在这个目录下面。</p>\n</li>\n</ol>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>安装之后，就以本文为例介绍如何使用该插件在文章中插入图片。</p>\n<ol>\n<li>创建名字为hexo-blog-image的文章，其命令如下：</li>\n</ol>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"hexo-blog-image\"</span></div></pre></td></tr></table></figure>\n<p>文章创建好了之后，在_post目录下可以看到hexo-blog-image/目录，将准备好的图片放到该目录下面，如下的结构:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo-blog-image</div><div class=\"line\">├── logo.png</div><div class=\"line\">└── rules.jpg</div><div class=\"line\">hexo-blog-image.md</div></pre></td></tr></table></figure></p>\n<p>这样的目录结构（目录名和文章名一致），只要使用 <code>![logo](hexo-blog-image/logo.png)</code> 就可以插入图片。</p>\n<p>如下图所示：<br><img src=\"/2017/01/14/hexo-blog-image/logo.png\" alt=\"logo\"></p>\n<p>生成的结构为<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public/<span class=\"number\">2017</span>/<span class=\"number\">01</span>/<span class=\"number\">14</span>/hexo-blog-image</div><div class=\"line\">├── index<span class=\"selector-class\">.html</span></div><div class=\"line\">├── logo<span class=\"selector-class\">.png</span></div><div class=\"line\">└── rules.jpg</div></pre></td></tr></table></figure></p>\n<p>同时，生成的 html 是<br><code>&lt;img src=&quot;/2017/01/14/hexo-blog-image/logo.png&quot; alt=&quot;logo&quot;&gt;</code><br>而不是愚蠢的<br><code>&lt;img src=&quot;hexo-blog-image/logo.png&quot; alt=&quot;logo&quot;&gt;</code></p>\n<h2 id=\"缺陷\"><a href=\"#缺陷\" class=\"headerlink\" title=\"缺陷\"></a>缺陷</h2><p>因为我的博客现在是托管在<code>Github</code>上面的，现在是有容量限制的，使用本地的图片可能会导致空间很快地消耗。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p>[1] <a href=\"http://www.jianshu.com/p/c2ba9533088a\" target=\"_blank\" rel=\"external\">hexo博客图片问题</a><br>[2] <a href=\"http://www.tuicool.com/articles/umEBVfI\" target=\"_blank\" rel=\"external\">在 hexo 中无痛使用本地图片</a><br>[3] <a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">CodeFalling/hexo-asset-image</a></p>\n","categories":[],"tags":[]},{"title":"Linux内核入门（二） -- likely和unlikely","url":"https://cosysn.github.io/2017/01/14/introduction-to-linux-kernel-2-likey-and-unlieky/","content":"<h1 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1. 引言\"></a>1. 引言</h1><p>最近在看VFS的源码，发现在if语句中大量使用了likely和unlikely这两个宏，就像以下代码所示：<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">int error = path_lookupat(<span class=\"name\">nd</span>, flags | LOOKUP_DIRECTORY, <span class=\"symbol\">&amp;path</span>)<span class=\"comment\">;</span></div><div class=\"line\">if (<span class=\"name\">unlikely</span>(<span class=\"name\">error</span>))</div><div class=\"line\">\treturn error<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>经过学习后，知道调用likely()或unlikely()告诉编译器这个条件很有可能或者不太有可能发生，好让编译器对这个条件判断进行正确地优化。这两个宏的定义如下：<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># define likely(<span class=\"name\">x</span>)\t__builtin_expect(!!(<span class=\"name\">x</span>), <span class=\"number\">1</span>)</div><div class=\"line\"># define unlikely(<span class=\"name\">x</span>)\t__builtin_expect(!!(<span class=\"name\">x</span>), <span class=\"number\">0</span>)</div></pre></td></tr></table></figure></p>\n<p>从宏的定义可以看出likely和unlikely都是使用<code>__builtin_expect</code>来实现的，其中<code>__builtin_expect</code>是GCC提供的內建函数，用于给GCC提供分支预测优化信息。</p>\n<h1 id=\"2-builtin-expect內建函数\"><a href=\"#2-builtin-expect內建函数\" class=\"headerlink\" title=\"2. __builtin_expect內建函数\"></a>2. <code>__builtin_expect</code>內建函数</h1><h2 id=\"2-1-功能说明\"><a href=\"#2-1-功能说明\" class=\"headerlink\" title=\"2.1 功能说明\"></a>2.1 功能说明</h2><p>GCC文档中对于函数的说明如下：</p>\n<blockquote>\n<p>— Built-in Function: long <code>__builtin_expect</code> (long exp, long c)<br>You may use <code>__builtin_expect</code> to provide the compiler with branch prediction information. In general, you should prefer to use actual profile feedback for this (-fprofile-arcs), as programmers are notoriously bad at predicting how their programs actually perform. However, there are applications in which this data is hard to collect.</p>\n<p>The return value is the value of exp, which should be an integral expression. The semantics of the built-in are that it is expected that exp == c. For example:</p>\n<pre><code>if (__builtin_expect (x, 0))\n  foo ();\n</code></pre><p>indicates that we do not expect to call foo, since we expect x to be zero. Since you are limited to integral expressions for exp, you should use constructions such as</p>\n<pre><code>if (__builtin_expect (ptr != NULL, 1))\n  foo (*ptr);\n</code></pre><p>when testing pointer or floating-point values.</p>\n</blockquote>\n<h1 id=\"3-优化原理\"><a href=\"#3-优化原理\" class=\"headerlink\" title=\"3. 优化原理\"></a>3. 优化原理</h1><h2 id=\"3-1-避免指令跳转！！！\"><a href=\"#3-1-避免指令跳转！！！\" class=\"headerlink\" title=\"3.1 避免指令跳转！！！\"></a>3.1 避免指令跳转！！！</h2><p>我们知道目前的CPU无一例外的都引入了流水线技术，用于加快指令的执行，提高CPU的性能。换句话说，就是CPU在处理当前指令的同时，会先取出后面的多条指令进行预处理，如下图所示：<br><img src=\"/2017/01/14/introduction-to-linux-kernel-2-likey-and-unlieky/cpu_pipeline.png\" alt=\"a\"><br>I486拥有五级流水线。分别是：取指(Fetch)，译码(D1, main decode)，转址(D2, translate)，执行(EX, execute)，写回(WB)。某个指令可以在流水线的任何一级。<br>从上图可见，流水线将原本串行执行的指令变成了并行执行了，极大的提高了指令的执行效率。但是如果存在跳转指令，那么之前预取的指令都没有用了，需要从内存中重新取出跳转后的指令继续执行。因此跳转指令会降低流水线的效率，从而降低CPU的性能。<br>我们在编写程序时要尽量避免跳转指令，让指令尽可能的顺序执行。</p>\n<p>那么，我们如何避免跳转指令呢？可以使用前面所说的__builtin_expect函数。</p>\n<h2 id=\"3-2-编译器的优化工作\"><a href=\"#3-2-编译器的优化工作\" class=\"headerlink\" title=\"3.2 编译器的优化工作\"></a>3.2 编译器的优化工作</h2><blockquote>\n<p>注：本节的内容是学习了<a href=\"https://kernelnewbies.org/FAQ/LikelyUnlikely\" target=\"_blank\" rel=\"external\">FAQ/LikelyUnlikely</a>这篇文章而写，自己根据文章的例子动手实践了一下。</p>\n</blockquote>\n<p>从GCC的说明中可知，__builtin_expect的主要作用就是：帮助编译器判断条件跳转的预期值，避免因执行jmp跳转指令造成时间浪费。那么它是怎么帮助编译器进行优化的呢？<br>编译器优化时，根据条件跳转的预期值，按正确地顺序生成汇编代码，把“很有可能发生”的条件分支放在顺序执行指令段，而不是jmp指令段（jmp指令会打乱CPU的指令执行顺序，大大影响CPU指令执行效率）。</p>\n<p>likely和unlikely主要用于if语句中，我们知道if语句分为3种形式：</p>\n<ol>\n<li><p>if</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">condition</span>) &#123;</div><div class=\"line\">\tstatement;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>if-else</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">\tstatement;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\tstatement;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>if-else-if</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">\tstatement;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> &#123;</div><div class=\"line\">\tstatement;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\tstatement;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>其中，if-else-if目前还没有遇到这种情况下会用到likely和unlikely的，后面遇到的话再进行研究。本文主要研究前两种情况。</p>\n<h3 id=\"3-2-1-if\"><a href=\"#3-2-1-if\" class=\"headerlink\" title=\"3.2.1 if\"></a>3.2.1 if</h3><p>下面举例说明。下面这个简单的C程序使用gcc -O2进行编译。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\">&nbsp</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> likely(x)    __builtin_expect(!!(x), 1)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> unlikely(x)  __builtin_expect(!!(x), 0)</span></div><div class=\"line\">&nbsp</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a;</div><div class=\"line\">&nbsp</div><div class=\"line\">    <span class=\"comment\">/*获取GCC无法优化的值*/</span></div><div class=\"line\">    a  = atoi(argv[<span class=\"number\">1</span>]);</div><div class=\"line\">&nbsp</div><div class=\"line\">    <span class=\"keyword\">if</span> (likely(a != <span class=\"number\">2</span>)) &#123;</div><div class=\"line\">        a++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, a);</div><div class=\"line\">&nbsp</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用objdump -S反汇编，查看它的汇编代码。<br><figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0000000000400510</span> &lt;main&gt;:</div><div class=\"line\">  <span class=\"comment\">// 调用atoi()</span></div><div class=\"line\">  <span class=\"number\">400510</span>:\t<span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>          \tsub    $0x8,%rsp</div><div class=\"line\">  <span class=\"number\">400514</span>:\t<span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">7</span>e <span class=\"number\">08</span>          \tmov    <span class=\"number\">0x8</span>(%rsi),%rdi</div><div class=\"line\">  <span class=\"number\">400518</span>:\tba <span class=\"number\">0</span>a <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       \tmov    $0xa,%edx</div><div class=\"line\">  <span class=\"number\">40051</span>d:\t<span class=\"number\">31</span> f6                \txor    %esi,%esi</div><div class=\"line\">  <span class=\"number\">40051</span>f:\te8 ec fe ff ff       \tcallq  <span class=\"number\">400410</span> &lt;strtol@plt&gt;</div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"comment\">// 测试 a != 2的值</span></div><div class=\"line\">  <span class=\"number\">400524</span>:\t<span class=\"number\">83</span> f8 <span class=\"number\">02</span>             \tcmp    $0x2,%eax</div><div class=\"line\">  <span class=\"number\">400527</span>:\t<span class=\"number\">89</span> c6                \tmov    %eax,%esi</div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"comment\">// 如果a等于2的话，就会跳转；如果a不等于2的话，就会继续执行，不会破坏</span></div><div class=\"line\">  <span class=\"comment\">// CPU的指令执行顺序</span></div><div class=\"line\">  <span class=\"number\">400529</span>:\t<span class=\"number\">74</span> <span class=\"number\">03</span>                \tje     <span class=\"number\">40052</span>e &lt;main+<span class=\"number\">0x1e</span>&gt;</div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"comment\">// a++;</span></div><div class=\"line\">  <span class=\"number\">40052</span>b:\t<span class=\"number\">83</span> c6 <span class=\"number\">01</span>             \tadd    $0x1,%esi</div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"comment\">// 调用printf</span></div><div class=\"line\">  <span class=\"number\">40052</span>e:\tbf <span class=\"number\">48</span> <span class=\"number\">06</span> <span class=\"number\">40</span> <span class=\"number\">00</span>       \tmov    $0x400648,%edi</div><div class=\"line\">  <span class=\"number\">400533</span>:\t<span class=\"number\">31</span> c0                \txor    %eax,%eax</div><div class=\"line\">  <span class=\"number\">400535</span>:\te8 b6 fe ff ff       \tcallq  <span class=\"number\">4003</span>f0 &lt;printf@plt&gt;</div><div class=\"line\">  <span class=\"number\">40053</span>a:\t<span class=\"number\">31</span> c0                \txor    %eax,%eax</div><div class=\"line\">  <span class=\"number\">40053</span>c:\t<span class=\"number\">48</span> <span class=\"number\">83</span> c4 <span class=\"number\">08</span>          \tadd    $0x8,%rsp</div><div class=\"line\">  <span class=\"number\">400540</span>:\tc3                   \tretq   </div><div class=\"line\">  <span class=\"number\">400541</span>:\t<span class=\"number\">90</span>                   \tnop</div></pre></td></tr></table></figure></p>\n<p>在上面程序中，用unlikely()代替其中的likely()，重新编译，再来看它的汇编代码：<br><figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0000000000400510</span> &lt;main&gt;:</div><div class=\"line\">  <span class=\"comment\">// 调用atoi()</span></div><div class=\"line\">  <span class=\"number\">400510</span>:\t<span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>          \tsub    $0x8,%rsp</div><div class=\"line\">  <span class=\"number\">400514</span>:\t<span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">7</span>e <span class=\"number\">08</span>          \tmov    <span class=\"number\">0x8</span>(%rsi),%rdi</div><div class=\"line\">  <span class=\"number\">400518</span>:\tba <span class=\"number\">0</span>a <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       \tmov    $0xa,%edx</div><div class=\"line\">  <span class=\"number\">40051</span>d:\t<span class=\"number\">31</span> f6                \txor    %esi,%esi</div><div class=\"line\">  <span class=\"number\">40051</span>f:\te8 ec fe ff ff       \tcallq  <span class=\"number\">400410</span> &lt;strtol@plt&gt;</div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"comment\">// 测试a != 2的值</span></div><div class=\"line\">  <span class=\"number\">400524</span>:\t<span class=\"number\">83</span> f8 <span class=\"number\">02</span>             \tcmp    $0x2,%eax</div><div class=\"line\">  <span class=\"number\">400527</span>:\t<span class=\"number\">89</span> c6                \tmov    %eax,%esi</div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"comment\">// 如果a不等于2的话，就会跳转；如果a等于2的话，就会继续执行，不会破坏</span></div><div class=\"line\">  <span class=\"comment\">// CPU的指令执行顺序</span></div><div class=\"line\">  <span class=\"number\">400529</span>:\t<span class=\"number\">75</span> <span class=\"number\">13</span>                \tjne    <span class=\"number\">40053</span>e &lt;main+<span class=\"number\">0x2e</span>&gt;</div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"comment\">// 调用printf</span></div><div class=\"line\">  <span class=\"number\">40052</span>b:\tbf <span class=\"number\">48</span> <span class=\"number\">06</span> <span class=\"number\">40</span> <span class=\"number\">00</span>       \tmov    $0x400648,%edi</div><div class=\"line\">  <span class=\"number\">400530</span>:\t<span class=\"number\">31</span> c0                \txor    %eax,%eax</div><div class=\"line\">  <span class=\"number\">400532</span>:\te8 b9 fe ff ff       \tcallq  <span class=\"number\">4003</span>f0 &lt;printf@plt&gt;</div><div class=\"line\">  <span class=\"number\">400537</span>:\t<span class=\"number\">31</span> c0                \txor    %eax,%eax</div><div class=\"line\">  <span class=\"number\">400539</span>:\t<span class=\"number\">48</span> <span class=\"number\">83</span> c4 <span class=\"number\">08</span>          \tadd    $0x8,%rsp</div><div class=\"line\">  <span class=\"number\">40053</span>d:\tc3                   \tretq   </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// a++;</span></div><div class=\"line\">  <span class=\"number\">40053</span>e:\t<span class=\"number\">83</span> c6 <span class=\"number\">01</span>             \tadd    $0x1,%esi</div><div class=\"line\">  <span class=\"number\">400541</span>:\teb e8                \tjmp    <span class=\"number\">40052</span>b &lt;main+<span class=\"number\">0x1b</span>&gt;</div><div class=\"line\">  <span class=\"number\">400543</span>:\t<span class=\"number\">90</span>                   \tnop</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-2-2-if-else\"><a href=\"#3-2-2-if-else\" class=\"headerlink\" title=\"3.2.2 if-else\"></a>3.2.2 if-else</h3><p>下面举例说明。下面这个简单的C程序使用gcc -O2进行编译。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\">&nbsp</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> likely(x)    __builtin_expect(!!(x), 1)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> unlikely(x)  __builtin_expect(!!(x), 0)</span></div><div class=\"line\">&nbsp</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a;</div><div class=\"line\">&nbsp</div><div class=\"line\">    <span class=\"comment\">/*获取GCC无法优化的值*/</span></div><div class=\"line\">    a  = atoi(argv[<span class=\"number\">1</span>]);</div><div class=\"line\">&nbsp</div><div class=\"line\">    <span class=\"keyword\">if</span> (likely(a==<span class=\"number\">2</span>)) &#123;</div><div class=\"line\">        a++;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        a--;</div><div class=\"line\">    &#125;</div><div class=\"line\">&nbsp</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, a);</div><div class=\"line\">&nbsp</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用objdump -S反汇编，查看它的汇编代码。<br><figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0000000000400510</span> &lt;main&gt;:</div><div class=\"line\">  <span class=\"comment\">// 调用atoi</span></div><div class=\"line\">  <span class=\"number\">400510</span>:\t<span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>          \tsub    $0x8,%rsp</div><div class=\"line\">  <span class=\"number\">400514</span>:\t<span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">7</span>e <span class=\"number\">08</span>          \tmov    <span class=\"number\">0x8</span>(%rsi),%rdi</div><div class=\"line\">  <span class=\"number\">400518</span>:\tba <span class=\"number\">0</span>a <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       \tmov    $0xa,%edx</div><div class=\"line\">  <span class=\"number\">40051</span>d:\t<span class=\"number\">31</span> f6                \txor    %esi,%esi</div><div class=\"line\">  <span class=\"number\">40051</span>f:\te8 ec fe ff ff       \tcallq  <span class=\"number\">400410</span> &lt;strtol@plt&gt;</div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"comment\">// 测试 a == 2 的值</span></div><div class=\"line\">  <span class=\"number\">400524</span>:\t<span class=\"number\">83</span> f8 <span class=\"number\">02</span>             \tcmp    $0x2,%eax</div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"comment\">// 如果 a == 2的话，会继续执行a++指令，不会进行跳转，这样就不会</span></div><div class=\"line\">  <span class=\"comment\">// 破坏CPU的预读处理。只有当a != 2时会进行跳转到400541处执行a--。</span></div><div class=\"line\">  <span class=\"number\">400527</span>:\t<span class=\"number\">75</span> <span class=\"number\">18</span>                \tjne    <span class=\"number\">400541</span> &lt;main+<span class=\"number\">0x31</span>&gt;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// 因为a == 2,则gcc编译器将a++直接优化成0x3</span></div><div class=\"line\">  <span class=\"number\">400529</span>:\tbe <span class=\"number\">03</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       \tmov    $0x3,%esi</div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"comment\">// 调用printf</span></div><div class=\"line\">  <span class=\"number\">40052</span>e:\tbf <span class=\"number\">48</span> <span class=\"number\">06</span> <span class=\"number\">40</span> <span class=\"number\">00</span>       \tmov    $0x400648,%edi</div><div class=\"line\">  <span class=\"number\">400533</span>:\t<span class=\"number\">31</span> c0                \txor    %eax,%eax</div><div class=\"line\">  <span class=\"number\">400535</span>:\te8 b6 fe ff ff       \tcallq  <span class=\"number\">4003</span>f0 &lt;printf@plt&gt;</div><div class=\"line\">  <span class=\"number\">40053</span>a:\t<span class=\"number\">31</span> c0                \txor    %eax,%eax</div><div class=\"line\">  <span class=\"number\">40053</span>c:\t<span class=\"number\">48</span> <span class=\"number\">83</span> c4 <span class=\"number\">08</span>          \tadd    $0x8,%rsp</div><div class=\"line\">  <span class=\"number\">400540</span>:\tc3                   \tretq   </div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"comment\">// a--;</span></div><div class=\"line\">  <span class=\"number\">400541</span>:\t<span class=\"number\">8</span>d <span class=\"number\">70</span> ff             \tlea    <span class=\"number\">-0x1</span>(%rax),%esi</div><div class=\"line\">  <span class=\"number\">400544</span>:\teb e8                \tjmp    <span class=\"number\">40052</span>e &lt;main+<span class=\"number\">0x1e</span>&gt;</div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"number\">400546</span>:\t<span class=\"number\">90</span>                   \tnop</div></pre></td></tr></table></figure></p>\n<p>在上面程序中，用unlikely()代替其中的likely()，重新编译，再来看它的汇编代码：<br><figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0000000000400510</span> &lt;main&gt;:</div><div class=\"line\">  <span class=\"comment\">// 调用atoi</span></div><div class=\"line\">  <span class=\"number\">400510</span>:\t<span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>          \tsub    $0x8,%rsp</div><div class=\"line\">  <span class=\"number\">400514</span>:\t<span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">7</span>e <span class=\"number\">08</span>          \tmov    <span class=\"number\">0x8</span>(%rsi),%rdi</div><div class=\"line\">  <span class=\"number\">400518</span>:\tba <span class=\"number\">0</span>a <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       \tmov    $0xa,%edx</div><div class=\"line\">  <span class=\"number\">40051</span>d:\t<span class=\"number\">31</span> f6                \txor    %esi,%esi</div><div class=\"line\">  <span class=\"number\">40051</span>f:\te8 ec fe ff ff       \tcallq  <span class=\"number\">400410</span> &lt;strtol@plt&gt;</div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"comment\">// 测试 a == 2 的值</span></div><div class=\"line\">  <span class=\"number\">400524</span>:\t<span class=\"number\">83</span> f8 <span class=\"number\">02</span>             \tcmp    $0x2,%eax</div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"comment\">// 如果 a == 2的话，会进行跳转到40053f处执行a++。而当 a!= 2时顺序执行</span></div><div class=\"line\">  <span class=\"comment\">// a--指令，不会进行跳转，这样就不会破坏CPU的预读处理。</span></div><div class=\"line\">  <span class=\"number\">400527</span>:\t<span class=\"number\">74</span> <span class=\"number\">16</span>                \tje     <span class=\"number\">40053</span>f &lt;main+<span class=\"number\">0x2f</span>&gt;</div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"comment\">// a--;</span></div><div class=\"line\">  <span class=\"number\">400529</span>:\t<span class=\"number\">8</span>d <span class=\"number\">70</span> ff             \tlea    <span class=\"number\">-0x1</span>(%rax),%esi</div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"comment\">// 调用printf</span></div><div class=\"line\">  <span class=\"number\">40052</span>c:\tbf <span class=\"number\">48</span> <span class=\"number\">06</span> <span class=\"number\">40</span> <span class=\"number\">00</span>       \tmov    $0x400648,%edi</div><div class=\"line\">  <span class=\"number\">400531</span>:\t<span class=\"number\">31</span> c0                \txor    %eax,%eax</div><div class=\"line\">  <span class=\"number\">400533</span>:\te8 b8 fe ff ff       \tcallq  <span class=\"number\">4003</span>f0 &lt;printf@plt&gt;</div><div class=\"line\">  <span class=\"number\">400538</span>:\t<span class=\"number\">31</span> c0                \txor    %eax,%eax</div><div class=\"line\">  <span class=\"number\">40053</span>a:\t<span class=\"number\">48</span> <span class=\"number\">83</span> c4 <span class=\"number\">08</span>          \tadd    $0x8,%rsp</div><div class=\"line\">  <span class=\"number\">40053</span>e:\tc3                   \tretq   </div><div class=\"line\">&nbsp</div><div class=\"line\">  <span class=\"comment\">// a++; 因为a == 2,则gcc编译器将a++直接优化成0x3</span></div><div class=\"line\">  <span class=\"number\">40053</span>f:\tbe <span class=\"number\">03</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       \tmov    $0x3,%esi</div><div class=\"line\">  <span class=\"number\">400544</span>:\teb e6                \tjmp    <span class=\"number\">40052</span>c &lt;main+<span class=\"number\">0x1c</span>&gt;</div><div class=\"line\">  <span class=\"number\">400546</span>:\t<span class=\"number\">90</span>                   \tnop</div></pre></td></tr></table></figure></p>\n<p>可见，编译器利用程序员作出的判断，生成了高效的汇编码。即，跳转语句不生效的概率很大。</p>\n<h1 id=\"4-如何使用\"><a href=\"#4-如何使用\" class=\"headerlink\" title=\"4. 如何使用\"></a>4. 如何使用</h1><p>在一个条件判断语句中，当这个条件被认为是非常非常有可能满足时，则使用likely()宏，否则，条件非常非常不可能或很难满足时，则使用unlikely()宏。</p>\n<h1 id=\"5-参考文献\"><a href=\"#5-参考文献\" class=\"headerlink\" title=\"5. 参考文献\"></a>5. 参考文献</h1><ol>\n<li><a href=\"https://kernelnewbies.org/FAQ/LikelyUnlikely\" target=\"_blank\" rel=\"external\">FAQ/LikelyUnlikely</a></li>\n<li><a href=\"http://velep.com/archives/795.html\" target=\"_blank\" rel=\"external\">likely(x)与unlikely(x)函数，即__builtin_expect的使用</a></li>\n<li><a href=\"http://www.cnblogs.com/LubinLew/p/GCC-__builtin_expect.html\" target=\"_blank\" rel=\"external\">__builtin_expect — 分支预测优化</a></li>\n<li><a href=\"http://stackoverflow.com/questions/7346929/why-do-we-use-builtin-expect-when-a-straightforward-way-is-to-use-if-else\" target=\"_blank\" rel=\"external\">Why do we use __builtin_expect when a straightforward way is to use if-else</a></li>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html\" target=\"_blank\" rel=\"external\">Other Built-in Functions Provided by GCC</a></li>\n<li><a href=\"https://my.oschina.net/moooofly/blog/175019\" target=\"_blank\" rel=\"external\">【整理】__builtin_expect 解惑</a></li>\n<li><a href=\"https://my.oschina.net/linjiezang/blog/805156\" target=\"_blank\" rel=\"external\">GCC __builtin_expect的作用</a></li>\n</ol>\n","categories":[],"tags":[]},{"title":"在VMware上安装Windows Server 2012失败-找不到Microsoft软件许可条款","url":"https://cosysn.github.io/2016/12/02/microsoft-software-license-terms-were-not-found/","content":"<h2 id=\"描述信息\"><a href=\"#描述信息\" class=\"headerlink\" title=\"描述信息\"></a>描述信息</h2><p>在VMware中安装Windows Server 2012时出现下面的错误：<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Windows</span> 找不到Microsoft软件许可证。请确保安装源有效，然后重新启动安装。</div></pre></td></tr></table></figure></p>\n<p>而且可以确认安装系统的ISO镜像是没有问题的，因为之前用过这个镜像安装过其他的系统。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>将虚拟机中的软盘删掉就可以正常安装了。</p>\n","categories":[],"tags":[]},{"title":"ACM Steps 1.2.5 find your present (2) 的解题报告","url":"https://cosysn.github.io/2016/11/30/acm-steps-1-2-5-find-your-present-2/","content":"<h2 id=\"描述信息\"><a href=\"#描述信息\" class=\"headerlink\" title=\"描述信息\"></a>描述信息</h2><p>Problem Description<br>In the new year party, everybody will get a “special present”.Now it’s your turn to get your special present, a lot of presents now putting on the desk, and only one of them will be yours.Each present has a card number on it, and your present’s card number will be the one that different from all the others, and you can assume that only one number appear odd times.For example, there are 5 present, and their card numbers are 1, 2, 3, 2, 1.so your present will be the one with the card number of 3, because 3 is the number that different from all the others.</p>\n<p>Input<br>The input file will consist of several cases.<br>Each case will be presented by an integer n (1&lt;=n&lt;1000000, and n is odd) at first. Following that, n positive integers will be given in a line, all integers will smaller than 2^31. These numbers indicate the card numbers of the presents.n = 0 ends the input.</p>\n<p>Output<br>For each case, output an integer in a line, which is the card number of your present. </p>\n<p>Sample Input<br>5<br>1 1 3 2 2<br>3<br>1 2 1<br>0</p>\n<p>Sample Output<br>3<br>2</p>\n<p>Hint<br>Hint</p>\n<p>use scanf to avoid Time Limit Exceeded</p>\n<p>Author<br>8600</p>\n<p>Source<br>HDU 2007-Spring Programming Contest - Warm Up （1）</p>\n<p>Recommend<br>8600</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>从题目可知，只有一个数出现的次数是奇数次，其他的数出现的次数是偶数，而我们就要找出那个出现了奇数次的数。我们可以利用位异或来求解：</p>\n<ol>\n<li>a ^ a = 0;</li>\n<li>0 ^ a = a;</li>\n<li>a ^ b = b ^ a;</li>\n</ol>\n<p>可以得知：<br>如果一个数进行奇数次异或之后其值为其本身，一个数进行偶数次异或之后其值为0。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\">&nbsp</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i, n;</div><div class=\"line\">    <span class=\"keyword\">int</span> num;</div><div class=\"line\">    <span class=\"keyword\">int</span> res;</div><div class=\"line\">&nbsp</div><div class=\"line\">    <span class=\"keyword\">while</span>((<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n) != EOF) &amp;&amp; (n != <span class=\"number\">0</span>)) &#123;</div><div class=\"line\">        res = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;num);</div><div class=\"line\">            res ^= num;</div><div class=\"line\">        &#125;</div><div class=\"line\">&nbsp</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, res);</div><div class=\"line\">    &#125;</div><div class=\"line\">&nbsp</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":[],"tags":[]},{"title":"ACM Steps 1.2.4 Nasty Hacks 的解题报告","url":"https://cosysn.github.io/2016/11/30/acm-steps-1-2-4-nasty-hacks/","content":"<h2 id=\"描述信息\"><a href=\"#描述信息\" class=\"headerlink\" title=\"描述信息\"></a>描述信息</h2><p>Problem Description<br>You are the CEO of Nasty Hacks Inc., a company that creates small pieces of malicious software which teenagers may use<br>to fool their friends. The company has just finished their first product and it is time to sell it. You want to make as much money as possible and consider advertising in order to increase sales. You get an analyst to predict the expected revenue, both with and without advertising. You now want to make a decision as to whether you should advertise or not, given the expected revenues.</p>\n<p>Input<br>The input consists of n cases, and the first line consists of one positive integer giving n. The next n lines each contain 3 integers, r, e and c. The first, r, is the expected revenue if you do not advertise, the second, e, is the expected revenue if you do advertise, and the third, c, is the cost of advertising. You can assume that the input will follow these restrictions: -106 ≤ r, e ≤ 106 and 0 ≤ c ≤ 106.</p>\n<p>Output<br>Output one line for each test case: “advertise”, “do not advertise” or “does not matter”, presenting whether it is most profitable to advertise or not, or whether it does not make any difference.</p>\n<p>Sample Input<br>3<br>0 100 70<br>100 130 30<br>-100 -70 40</p>\n<p>Sample Output<br>advertise<br>does not matter<br>do not advertise</p>\n<p>Source<br>Nordic 2006</p>\n<p>Recommend<br>zty</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>计算打广告和不打广告的收益差x = e-c-r，并做如下判断：</p>\n<ol>\n<li>x &gt; 0， 需要打广告</li>\n<li>x = 0,  打不打广告都可以</li>\n<li>x &lt; 0, 不需要打广告</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\">&nbsp</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    <span class=\"keyword\">int</span> n, r, e, c;</div><div class=\"line\">    <span class=\"keyword\">int</span> revenues;</div><div class=\"line\">&nbsp</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d %d\"</span>, &amp;r, &amp;e, &amp;c);</div><div class=\"line\">        revenues = e-c-r;</div><div class=\"line\">&nbsp</div><div class=\"line\">        <span class=\"keyword\">if</span> (revenues &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"advertise\\n\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (revenues == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"does not matter\\n\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"do not advertise\\n\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"使用Github管理博客的文章","url":"https://cosysn.github.io/2016/11/30/use-github-to-manage-blog/","content":"<p>之前已经使用Github来托管博客了，但是我写的博客的源文档并没有被有效的管理起来。如果哪天我换了电脑、硬盘坏了或者误删除文件等问题导致博客的源文档丢失了，那么辛辛苦苦写的博客就全丢了。既然可以使用Github可以托管生成的博客网站，那么也可以托管博客的源文档，以后即便出了问题，也可以使用Git进行恢复。</p>\n<h2 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h2><h3 id=\"建立Git仓库\"><a href=\"#建立Git仓库\" class=\"headerlink\" title=\"建立Git仓库\"></a>建立Git仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> hexo路径</div><div class=\"line\">git init</div></pre></td></tr></table></figure>\n<p>使用git init初始化新的git仓库</p>\n<h3 id=\"配置-gitignore\"><a href=\"#配置-gitignore\" class=\"headerlink\" title=\"配置.gitignore\"></a>配置.gitignore</h3><p>如果没有.gitignore文件，则手动创建.gitignore文件，用来屏蔽掉不需要管理的目录。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Logs</span></div><div class=\"line\">logs</div><div class=\"line\">*.log</div><div class=\"line\">npm-debug.log*</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">#<span class=\"bash\"> Runtime data</span></div><div class=\"line\">pids</div><div class=\"line\">*.pid</div><div class=\"line\">*.seed</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">#<span class=\"bash\"> Directory <span class=\"keyword\">for</span> instrumented libs generated by jscoverage/JSCover</span></div><div class=\"line\">lib-cov</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">#<span class=\"bash\"> Coverage directory used by tools like istanbul</span></div><div class=\"line\">coverage</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">#<span class=\"bash\"> nyc <span class=\"built_in\">test</span> coverage</span></div><div class=\"line\">.nyc_output</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">#<span class=\"bash\"> Grunt intermediate storage (http://gruntjs.com/creating-plugins<span class=\"comment\">#storing-task-files)</span></span></div><div class=\"line\">.grunt</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">#<span class=\"bash\"> node-waf configuration</span></div><div class=\"line\">.lock-wscript</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">#<span class=\"bash\"> Compiled binary addons (http://nodejs.org/api/addons.html)</span></div><div class=\"line\">build/Release</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">#<span class=\"bash\"> Dependency directories</span></div><div class=\"line\">node_modules</div><div class=\"line\">jspm_packages</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">#<span class=\"bash\"> Optional npm cache directory</span></div><div class=\"line\">.npm</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">#<span class=\"bash\"> Optional REPL <span class=\"built_in\">history</span></span></div><div class=\"line\">.node_repl_history</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">#<span class=\"bash\"> Hexo</span></div><div class=\"line\">public           # hexo自动生成静态博客的目录，不需要管理</div><div class=\"line\">.deploy_git      # hexo deploy生成的临时文件，不需要管理</div><div class=\"line\">db.json</div><div class=\"line\">*.log</div><div class=\"line\">*~</div><div class=\"line\">.DS_Store</div><div class=\"line\">Thumbs.db</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加Github远程仓库\"><a href=\"#添加Github远程仓库\" class=\"headerlink\" title=\"添加Github远程仓库\"></a>添加Github远程仓库</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote <span class=\"keyword\">add</span><span class=\"bash\"> origin 在Github上创建的仓库的地址</span></div></pre></td></tr></table></figure>\n<h3 id=\"添加到Git仓库\"><a href=\"#添加到Git仓库\" class=\"headerlink\" title=\"添加到Git仓库\"></a>添加到Git仓库</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">add</span><span class=\"bash\"> .</span></div><div class=\"line\">git commit -a -m <span class=\"string\">\"commit first\"</span></div></pre></td></tr></table></figure>\n<p>将Hexo下的所有的文件都添加到Git仓库里面，除了.gitignore文件中屏蔽掉的文件。</p>\n<h3 id=\"推送到Github\"><a href=\"#推送到Github\" class=\"headerlink\" title=\"推送到Github\"></a>推送到Github</h3><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> master</div></pre></td></tr></table></figure>\n<p>将所有的文件都推送到Github上去，以后就可以随便更换电脑，不用担心博客的文档被破坏了。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a href=\"http://blog.csdn.net/li740207611/article/details/52142852\" target=\"_blank\" rel=\"external\">blog=github+hexo+git</a></li>\n</ol>\n","categories":[],"tags":[]},{"title":"泡茶随笔","url":"https://cosysn.github.io/2016/11/30/tea-notes/","content":"<h2 id=\"中国八大名优绿茶\"><a href=\"#中国八大名优绿茶\" class=\"headerlink\" title=\"中国八大名优绿茶\"></a>中国八大名优绿茶</h2><ul>\n<li>西湖龙井</li>\n<li>洞庭碧螺春</li>\n<li>黄山毛峰</li>\n<li>庐山云雾茶</li>\n<li>六安瓜片</li>\n<li>雁荡毛峰</li>\n<li>信阳毛尖</li>\n<li>太平猴魁<br>有关名优绿茶的更多详情，请见<a href=\"https://www.douban.com/note/361713111/\" target=\"_blank\" rel=\"external\">中国八大名优绿茶</a>。</li>\n</ul>\n<h2 id=\"泡茶步骤\"><a href=\"#泡茶步骤\" class=\"headerlink\" title=\"泡茶步骤\"></a>泡茶步骤</h2><ol>\n<li><p>温具：<br>用热水冲淋茶壶，包括壶嘴、壶盖，同事冲淋茶杯，随后即将茶壶、茶杯沥干。温具的目的是提高茶具温度，使茶叶冲泡后温度相对稳定，不使温度过快下降，这对较粗老茶叶的冲泡尤为重要。</p>\n</li>\n<li><p>置茶：<br>按茶壶或茶杯的大小，往泡茶的壶（杯）里置入一定数量的茶叶。置入茶叶后，可以观赏壶（杯）里的茶叶形状与颜色。<br>1:50的茶水比例</p>\n</li>\n<li><p>洗茶:<br>洗去茶叶上的尘垢<br>温润泡，舒展茶叶便于茶汁的浸出<br>醒茶，唤醒茶性<br>洗茶的时间不可太长，不要超过3s。洗茶时，水注入后应尽快将水倒出，不可停留过长时间，免得茶叶中有效成分的大量损失。<br>对名优绿茶来说，洗茶的温度不宜太过。一般应采用低于80度的开水进行洗茶操作。</p>\n</li>\n<li><p>冲泡：<br>置茶入壶（杯）后，按茶与水的比例，将开水冲入壶中。冲水时，除乌龙茶冲水须溢出壶口、壶嘴外，通常以冲水八分满为宜。如果使用玻璃杯或白瓷杯冲泡，可以特别注重欣赏细嫩的茶叶，冲水也以七八分满为度。冲水时有“凤凰三点头”的讲究，就是将水壶下倾上提三次，这既是主人向宾客点头致意，也能使茶叶和茶水上下翻动，使茶汤浓度一致。<br>水温85度左右，茶芽嫩，水温过高，影响口感。</p>\n</li>\n<li><p>倒茶：<br>冲泡好的茶应先倒进茶海里，然后再从茶海倒进客人的茶杯（品茗杯）中。茶海又称公道杯，取分茶公道之意。<br>出汤 静候一分钟，出汤。出汤太快，口感较淡。</p>\n</li>\n<li><p>奉茶：<br>奉茶时，需要用茶盘托着送给客人，放置客人右手前方。奉茶的时候，主人还须用空余的手做出请茶的姿势，此时客人可用右手食指和中指并拢弯曲，轻轻敲打桌面，以表谢意。</p>\n</li>\n<li><p>品尝 轻啜慢品，饶舌，入喉回味。</p>\n</li>\n<li><p>品茶：<br>茶泡好之后不可急于饮用，而是应该先观色察形，接着端杯闻香，再啜汤赏味。赏味时，应让茶汤从舌尖沿舌两侧流到舌根，再回到舌头，如此反复二三次，以留下茶汤清香甘甜的回味。</p>\n</li>\n</ol>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li>保持指甲修整、干净，泡茶前要洗手，忌用有香味的护手霜、香水等化妆品。泡茶时手上和腕部不宜佩戴太多散碎饰品。</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"https://www.zhihu.com/question/24211483\" target=\"_blank\" rel=\"external\">泡茶真的有必要倒去第一遍么？</a></li>\n<li><a href=\"http://www.iliuye.com/index.php/Wap/Index/article/id/82297\" target=\"_blank\" rel=\"external\">【知乎】新技能get，如何在人前优雅地泡茶</a></li>\n<li><a href=\"https://www.zhihu.com/question/21831918\" target=\"_blank\" rel=\"external\">使用盖碗泡茶有什么技巧？</a></li>\n<li><a href=\"http://jingyan.baidu.com/article/359911f50cce2357fe03063c.html\" target=\"_blank\" rel=\"external\">泡茶的基本步骤</a></li>\n</ol>\n","categories":[],"tags":[]},{"title":"ACM Steps 1.2.3 Box of Bricks 的解题报告","url":"https://cosysn.github.io/2016/11/30/acm-steps-1-2-3-box-of-bricks/","content":"<h2 id=\"描述信息\"><a href=\"#描述信息\" class=\"headerlink\" title=\"描述信息\"></a>描述信息</h2><p>Problem Description<br>Little Bob likes playing with his box of bricks. He puts the bricks one upon another and builds stacks of different height. “Look, I\\’ve built a wall!”, he tells his older sister Alice. “Nah, you should make all stacks the same height. Then you would have a real wall.”, she retorts. After a little consideration, Bob sees that she is right. So he sets out to rearrange the bricks, one by one, such that all stacks are the same height afterwards. But since Bob is lazy he wants to do this with the minimum number of bricks moved. Can you help?</p>\n<p>Input<br>The input consists of several data sets. Each set begins with a line containing the number n of stacks Bob has built. The next line contains n numbers, the heights hi of the n stacks. You may assume 1≤n≤50 and 1≤hi≤100.</p>\n<p>The total number of bricks will be divisible by the number of stacks. Thus, it is always possible to rearrange the bricks such that all stacks have the same height.</p>\n<p>The input is terminated by a set starting with n = 0. This set should not be processed.</p>\n<p>Output<br>For each set, print the minimum number of bricks that have to be moved in order to make all the stacks the same height.<br>Output a blank line between each set.</p>\n<p>Sample Input<br>6<br>5 2 4 1 7 5<br>0</p>\n<p>Sample Output<br>Set #1<br>The minimum number of moves is 5.</p>\n<p>Author<br>qianneng</p>\n<p>Source<br>冬练三九之二</p>\n<p>Recommend<br>lcy</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>假设n个stack，每个stack的高度为(h0, h1, … hn)，那么求解问题的算法步骤如下：</p>\n<ol>\n<li>每个stack的高度相同，那么stack的高度就是havg = (h0 + h1 + … + hn) / n；</li>\n<li>依次计算每个stack上需要搬出的brick个数，然后计算所有的stack搬出的brick的总和，即为题目所求；</li>\n<li>计算第i个stack上需要搬出的brick的个数，如果hi &lt;= havg，则不需要搬出brick，如果hi &gt; havg，则需要搬出brick的个数为hi - havg。</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\">&nbsp</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 51</span></div><div class=\"line\">&nbsp</div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">stack</span>[N];</div><div class=\"line\">&nbsp</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, n = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> avg = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> moved = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">set</span> = <span class=\"number\">0</span>;  </div><div class=\"line\">&nbsp</div><div class=\"line\">    <span class=\"keyword\">while</span>((<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n) != EOF) &amp;&amp; (n != <span class=\"number\">0</span>)) &#123;</div><div class=\"line\">        sum = <span class=\"number\">0</span>;</div><div class=\"line\">        moved = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;<span class=\"built_in\">stack</span>[i]);</div><div class=\"line\">            sum += <span class=\"built_in\">stack</span>[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">&nbsp</div><div class=\"line\">        avg = sum / n;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">stack</span>[i] &gt; avg) &#123;</div><div class=\"line\">                moved += <span class=\"built_in\">stack</span>[i] - avg;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">set</span>++;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Set #%d\\nThe minimum number of moves is %d.\\n\\n\"</span>, <span class=\"built_in\">set</span>, moved);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"ACM Steps 1.2.2 hide handkerchief 的解题报告","url":"https://cosysn.github.io/2016/11/28/acm-steps-1-2-2-hide-handkerchief/","content":"<a id=\"more\"></a>\n<h2 id=\"描述信息\"><a href=\"#描述信息\" class=\"headerlink\" title=\"描述信息\"></a>描述信息</h2><p>Problem Description<br>The Children’s Day has passed for some days .Has you remembered something happened at your childhood? I remembered I often played a game called hide handkerchief with my friends.<br>Now I introduce the game to you. Suppose there are N people played the game ,who sit on the ground forming a circle ,everyone owns a box behind them .Also there is a beautiful handkerchief hid in a box which is one of the boxes .<br>Then Haha(a friend of mine) is called to find the handkerchief. But he has a strange habit. Each time he will search the next box which is separated by M-1 boxes from the current box. For example, there are three boxes named A,B,C, and now Haha is at place of A. now he decide the M if equal to 2, so he will search A first, then he will search the C box, for C is separated by 2-1 = 1 box B from the current box A . Then he will search the box B ,then he will search the box A.<br>So after three times he establishes that he can find the beautiful handkerchief. Now I will give you N and M, can you tell me that Haha is able to find the handkerchief or not. If he can, you should tell me “YES”, else tell me “POOR Haha”.</p>\n<p>Input<br>There will be several test cases; each case input contains two integers N and M, which satisfy the relationship: 1&lt;=M&lt;=100000000 and 3&lt;=N&lt;=100000000. When N=-1 and M=-1 means the end of input case, and you should not process the data.</p>\n<p>Output<br>For each input case, you should only the result that Haha can find the handkerchief or not.</p>\n<p>Sample Input<br>3 2<br>-1 -1</p>\n<p>Sample Output<br>YES</p>\n<p>Source<br>HDU 2007-6 Programming Contest</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这道题可能理解有点困难，其实就是N个盒子摆成一圈，Haha每次跳过M-1个盒子，去检查第M个盒子，看是否能将所有的盒子都找一遍。如果能够找到的话，就输出YES，否则的话，就输出POOR Haha。<br>这道题其实考察的是N和M是否为互质的问题，如果互质的话，因为可以无限循环，那么肯定可以将所有的盒子都找一遍。如果两个数不互质的话，总有几个盒子会遍历不到。<br>使用辗转相除法求N和M的最大公约数，如果最大公约数为1的话，说明两个数互质。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\">&nbsp</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> r;</div><div class=\"line\">&nbsp</div><div class=\"line\">    <span class=\"keyword\">if</span> (a &lt; b) &#123; <span class=\"comment\">/*求a和b的最大公约数时，保证a&gt;b*/</span></div><div class=\"line\">        r = a;</div><div class=\"line\">        a = b;</div><div class=\"line\">        b = r;</div><div class=\"line\">    &#125;</div><div class=\"line\">&nbsp</div><div class=\"line\">    <span class=\"comment\">/*辗转相除*/</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (b != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        r = a % b;</div><div class=\"line\">        a = b;</div><div class=\"line\">        b = r;</div><div class=\"line\">    &#125;</div><div class=\"line\">&nbsp</div><div class=\"line\">    <span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div><div class=\"line\">&nbsp</div><div class=\"line\">&nbsp</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n, m;</div><div class=\"line\">&nbsp</div><div class=\"line\">    <span class=\"keyword\">while</span> ((<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;n, &amp;m) != EOF) &amp;&amp; (m != <span class=\"number\">-1</span> &amp;&amp; n != <span class=\"number\">-1</span>)) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gcd(n, m) == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"YES\\n\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"POOR Haha\\n\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":[],"tags":[]},{"title":"使用hexo deploy时遇到fatal: Not a git repository (or any of the parent directories): .git的错误","url":"https://cosysn.github.io/2016/11/26/hexo-deploy-occur-fatal-Not-a-git-repository-or-any-of-the-parent-directories-git的错误/","content":"<a id=\"more\"></a>\n<h2 id=\"描述信息\"><a href=\"#描述信息\" class=\"headerlink\" title=\"描述信息\"></a>描述信息</h2><p>当使用hexo deploy命令将博客部署到github上是出现下面的错误信息：<br><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cosysn@Cosysn-PC MINGW64 /h/Dev/myBlog/cosysn.github.io</div><div class=\"line\">$ hexo deploy</div><div class=\"line\">INFO  Deploying: git</div><div class=\"line\">INFO  Clearing .deploy_git folder...</div><div class=\"line\">INFO  Copying files from public folder...</div><div class=\"line\">fatal: Not a git repository (or any of the parent directories): .git</div><div class=\"line\">FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</div><div class=\"line\">Error: fatal: Not a git repository (or any of the parent directories): .git</div><div class=\"line\">&nbsp</div><div class=\"line\">    at ChildProcess.&lt;anonymous&gt; (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\h</span>exo-deployer-git<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\h</span>exo-util<span class=\"symbol\">\\l</span>ib<span class=\"symbol\">\\s</span>pawn.js:37:17)</div><div class=\"line\">    at emitTwo (events.js:87:13)</div><div class=\"line\">    at ChildProcess.emit (events.js:172:7)</div><div class=\"line\">    at ChildProcess.cp.emit (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\h</span>exo-deployer-git<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\h</span>exo-util<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\c</span>ross-spawn<span class=\"symbol\">\\l</span>ib<span class=\"symbol\">\\e</span>noent.js:40:29)</div><div class=\"line\">    at maybeClose (internal/child_process.js:829:16)</div><div class=\"line\">    at Socket.&lt;anonymous&gt; (internal/child_process.js:319:11)</div><div class=\"line\">    at emitOne (events.js:77:13)</div><div class=\"line\">    at Socket.emit (events.js:169:7)</div><div class=\"line\">    at Pipe._onclose (net.js:486:12)</div><div class=\"line\">FATAL fatal: Not a git repository (or any of the parent directories): .git</div><div class=\"line\">&nbsp</div><div class=\"line\">Error: fatal: Not a git repository (or any of the parent directories): .git</div><div class=\"line\">&nbsp</div><div class=\"line\">    at ChildProcess.&lt;anonymous&gt; (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\h</span>exo-deployer-git<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\h</span>exo-util<span class=\"symbol\">\\l</span>ib<span class=\"symbol\">\\s</span>pawn.js:37:17)</div><div class=\"line\">    at emitTwo (events.js:87:13)</div><div class=\"line\">    at ChildProcess.emit (events.js:172:7)</div><div class=\"line\">    at ChildProcess.cp.emit (H:<span class=\"symbol\">\\D</span>ev<span class=\"symbol\">\\m</span>yBlog<span class=\"symbol\">\\c</span>osysn.github.io<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\h</span>exo-deployer-git<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\h</span>exo-util<span class=\"symbol\">\\n</span>ode_modules<span class=\"symbol\">\\c</span>ross-spawn<span class=\"symbol\">\\l</span>ib<span class=\"symbol\">\\e</span>noent.js:40:29)</div><div class=\"line\">    at maybeClose (internal/child_process.js:829:16)</div><div class=\"line\">    at Socket.&lt;anonymous&gt; (internal/child_process.js:319:11)</div><div class=\"line\">    at emitOne (events.js:77:13)</div><div class=\"line\">    at Socket.emit (events.js:169:7)</div><div class=\"line\">    at Pipe._onclose (net.js:486:12)</div></pre></td></tr></table></figure></p>\n<p>检查git的配置没有问题</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>将hexo根目录下的.deploy_git/删除掉，然后使用hexo deploy重新部署就可以了。<br>但是暂时不清楚是什么原因引起的错误。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li>搭建hexo博客并部署到github上(<a href=\"http://www.tuicool.com/articles/uE7FJba/\" target=\"_blank\" rel=\"external\">http://www.tuicool.com/articles/uE7FJba/</a>)</li>\n</ol>\n","categories":[],"tags":[]},{"title":"解析VMware ESXi/ESX中SCSI感知代码的工具 - esxi_sense","url":"https://cosysn.github.io/2016/11/26/a-tool-to-interprete-scsi-sense-codes-in-vmware-esxi-and-esx/","content":"<p>注意：本文仅用于ESXi 5.0及以以后的版本，其他的版本暂不支持。</p>\n<h2 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1. 引言\"></a>1. 引言</h2><p>我们在定位ESXi或ESX出现的问题的时候，经常会在ESXi/ESX主机上的vmkernel.log或messages.log的系统日志文件中，见到类似下面的日志信息：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">2011<span class=\"selector-tag\">-04-04T21</span><span class=\"selector-pseudo\">:07</span><span class=\"selector-pseudo\">:30.257Z</span> <span class=\"selector-tag\">cpu2</span><span class=\"selector-pseudo\">:2050)ScsiDeviceIO</span>: 2315: <span class=\"selector-tag\">Cmd</span>(0<span class=\"selector-tag\">x4124003edb00</span>) 0<span class=\"selector-tag\">x12</span>, <span class=\"selector-tag\">CmdSN</span> 0<span class=\"selector-tag\">x51</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">dev</span> \"<span class=\"selector-tag\">naa</span><span class=\"selector-class\">.600508e000000000c9f6baa7c19f6900</span>\" <span class=\"selector-tag\">failed</span> <span class=\"selector-tag\">H</span><span class=\"selector-pseudo\">:0x0</span> <span class=\"selector-tag\">D</span><span class=\"selector-pseudo\">:0x2</span> <span class=\"selector-tag\">P</span><span class=\"selector-pseudo\">:0x0</span> <span class=\"selector-tag\">Valid</span> <span class=\"selector-tag\">sense</span> <span class=\"selector-tag\">data</span>: 0<span class=\"selector-tag\">x5</span> 0<span class=\"selector-tag\">x24</span> 0<span class=\"selector-tag\">x0</span>. </div><div class=\"line\"><span class=\"selector-tag\">Mar</span> 9 23<span class=\"selector-pseudo\">:53</span><span class=\"selector-pseudo\">:24</span> <span class=\"selector-tag\">esx405</span> <span class=\"selector-tag\">vmkernel</span>: 2<span class=\"selector-pseudo\">:14</span><span class=\"selector-pseudo\">:39</span><span class=\"selector-pseudo\">:54.069</span> <span class=\"selector-tag\">cpu3</span><span class=\"selector-pseudo\">:4300)ScsiDeviceIO</span>: 1688: <span class=\"selector-tag\">Command</span> 0<span class=\"selector-tag\">x28</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">device</span> \"<span class=\"selector-tag\">naa</span><span class=\"selector-class\">.60000970000292600219533031453245</span>\" <span class=\"selector-tag\">failed</span> <span class=\"selector-tag\">H</span><span class=\"selector-pseudo\">:0x1</span> <span class=\"selector-tag\">D</span><span class=\"selector-pseudo\">:0x0</span> <span class=\"selector-tag\">P</span><span class=\"selector-pseudo\">:0x3</span> <span class=\"selector-tag\">Possible</span> <span class=\"selector-tag\">sense</span> <span class=\"selector-tag\">data</span>: 0<span class=\"selector-tag\">x0</span> 0<span class=\"selector-tag\">x0</span> 0<span class=\"selector-tag\">x0</span>.</div></pre></td></tr></table></figure></p>\n<p>这些日志中记录了SCSI状态代码表示I/O以某种给定的状态失败。此状况对任何给定的工作负载而言可能是临时的、暂时性的、良性的或严重的，具体取决于收到的状态。如果能够从日志中记录的状态码中获得错误的原因，那么对于定位问题有很好的指导作用。</p>\n<p>找出 SCSI 事件，并关注下面十六进制值：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">H:</span><span class=\"number\">0x0</span> <span class=\"string\">D:</span><span class=\"number\">0x2</span> <span class=\"string\">P:</span><span class=\"number\">0x0</span> Valid sense <span class=\"string\">data:</span> <span class=\"number\">0x5</span> <span class=\"number\">0x24</span> <span class=\"number\">0x0</span></div></pre></td></tr></table></figure></p>\n<p>这些SCSI状态代码表示I/O以某种给定的状态失败。此状况对任何给定的工作负载而言可能是临时的、暂时性的、良性的或严重的，具体取决于收到的状态。如果能够从日志中记录的状态码中找到错误的原因，那么对于定位问题有很大的帮助。</p>\n<p>有关如何解析这些SCSI状态码，请参见<a href=\"https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=289902\" target=\"_blank\" rel=\"external\">Interpreting SCSI sense codes in VMware ESXi and ESX (289902)</a> </p>\n<p>但是如果每次出现问题都要去查一下文档，不仅费时费力，效率还低。为了提高效率，我开发了esxi_sense工具用来解析SCSI感知代码， 省去了查询文档的麻烦。</p>\n<h2 id=\"2-示例\"><a href=\"#2-示例\" class=\"headerlink\" title=\"2. 示例\"></a>2. 示例</h2><p>如果在日志文件中打印了下面的日志信息：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2011</span><span class=\"number\">-04</span><span class=\"number\">-04</span><span class=\"string\">T21:</span><span class=\"number\">07</span>:<span class=\"number\">30.257</span>Z <span class=\"string\">cpu2:</span><span class=\"number\">2050</span>)<span class=\"string\">ScsiDeviceIO:</span> <span class=\"number\">2315</span>: Cmd(<span class=\"number\">0x4124003edb00</span>) <span class=\"number\">0x12</span>, CmdSN <span class=\"number\">0x51</span> to dev <span class=\"string\">\"naa.600508e000000000c9f6baa7c19f6900\"</span> failed <span class=\"string\">H:</span><span class=\"number\">0x0</span> <span class=\"string\">D:</span><span class=\"number\">0x2</span> <span class=\"string\">P:</span><span class=\"number\">0x0</span> Valid sense <span class=\"string\">data:</span> <span class=\"number\">0x5</span> <span class=\"number\">0x24</span> <span class=\"number\">0x0</span>.</div></pre></td></tr></table></figure></p>\n<p>那么可以使用esxi_sense解析日志中的状态码。<br><figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@localhost:/mnt/src<span class=\"meta\"># ./esxi_sense -h 0x0 -d 0x2 -p 0x0 -s 0x5 -a 0x24/0x0</span></div><div class=\"line\">==================== Host Status ======================</div><div class=\"line\">Code: [<span class=\"number\">0x0</span>]</div><div class=\"line\">Name: OK</div><div class=\"line\">Description: This status <span class=\"keyword\">is</span> returned <span class=\"keyword\">when</span> there <span class=\"keyword\">is</span> no <span class=\"keyword\">error</span> <span class=\"keyword\">on</span> the host side. This <span class=\"keyword\">is</span> <span class=\"keyword\">when</span> you see <span class=\"keyword\">if</span> there <span class=\"keyword\">is</span> a status <span class=\"keyword\">for</span> a device <span class=\"keyword\">or</span> plugin. This status <span class=\"keyword\">is</span> also <span class=\"keyword\">when</span> you see valid sense data instead <span class=\"keyword\">of</span> possible sense data.</div><div class=\"line\">&nbsp</div><div class=\"line\">==================== Device Status ======================</div><div class=\"line\">Code: [<span class=\"number\">0x2</span>]</div><div class=\"line\">Name: CHECK_CONDITION</div><div class=\"line\">Description: This status <span class=\"keyword\">is</span> returned <span class=\"keyword\">when</span> a command fails <span class=\"keyword\">for</span> a specific reason. <span class=\"keyword\">When</span> a CHECK CONDITION <span class=\"keyword\">is</span> received, the ESX storage stack will send out a SCSI command <span class=\"number\">0x3</span> (REQUEST SENSE) <span class=\"keyword\">in</span> <span class=\"keyword\">order</span> <span class=\"keyword\">to</span> <span class=\"keyword\">get</span> the SCSI sense data (Sense <span class=\"keyword\">Key</span>, Additional Sense Code, ASC Qualifier, <span class=\"keyword\">and</span> other bits). The sense data <span class=\"keyword\">is</span> listed after Valid sense data <span class=\"keyword\">in</span> the <span class=\"keyword\">order</span> <span class=\"keyword\">of</span> Sense <span class=\"keyword\">Key</span>, Additional Sense Code, <span class=\"keyword\">and</span> ASC Qualifier.</div><div class=\"line\">&nbsp</div><div class=\"line\">==================== Plugin Status ======================</div><div class=\"line\">Code: [<span class=\"number\">0x0</span>]</div><div class=\"line\">Name: GOOD</div><div class=\"line\">Description: No <span class=\"keyword\">error</span>.(ESXi <span class=\"number\">5.</span>x / <span class=\"number\">6.</span>x only)</div><div class=\"line\">&nbsp</div><div class=\"line\">==================== Sense <span class=\"keyword\">Key</span> ======================</div><div class=\"line\">Code: [<span class=\"number\">0x5</span>]</div><div class=\"line\">Name: ILLEGAL REQUEST</div><div class=\"line\">&nbsp</div><div class=\"line\">==================== Additional Sense Data ======================</div><div class=\"line\">Code: [<span class=\"number\">0x24</span>/<span class=\"number\">0x0</span>]</div><div class=\"line\">Description: INVALID FIELD <span class=\"keyword\">IN</span> CDB</div></pre></td></tr></table></figure></p>\n<p>可以看到上面解析了每个状态代码所代表的意思。</p>\n<h2 id=\"3-使用帮助\"><a href=\"#3-使用帮助\" class=\"headerlink\" title=\"3. 使用帮助\"></a>3. 使用帮助</h2><p>Usgae: esxi_sense [OPTION]…<br>Interpreting SCSI sense codes in VMware ESXi and ESX</p>\n<p>Options:<br>-h, –host                     Input the host status, the value must be an hex number.<br>-d, –device                   Input the device status, the value must be an hex number.<br>-p, –plugin                   Input the plugin status, the value must be an hex number.<br>-s, –sense-key                Input the sense key, the value must be an hex number.<br>-a, –additional-sense-data    Input the additional sense data, it is an ASC/ASCQ pair value.<br>    –help                     Display this help and exit<br>-v, –version                  Display version information and exit</p>\n<p>-h或—host，用来解析SCSI主机代码，这些代码可能来自主机适配器上的固件或来自适配器驱动冲虚控制的若干主机之一。<br>有关SCSI主机代码的详细信息，请参见 <a href=\"https://kb.vmware.com/selfservice/search.do?cmd=displayKC&amp;docType=kc&amp;docTypeID=DT_KB_1_1&amp;externalId=1029039\" target=\"_blank\" rel=\"external\">Understanding SCSI host-side NMP errors/conditions in ESX 4.x and ESXi 5.x (1029039)</a>。</p>\n<p>-d或—device，用来解析SCSI设备/状态代码，SCSI状态代码表示命令处理完成之后的状态，代码值由T10委员会指定。有关详细信息，请参见 <a href=\"http://www.t10.org/lists/2status.htm\" target=\"_blank\" rel=\"external\">SCSI Status Codes</a>。<br>而有关 SCSI 设备代码的其他信息，请参见 <a href=\"https://kb.vmware.com/selfservice/search.do?cmd=displayKC&amp;docType=kc&amp;docTypeID=DT_KB_1_1&amp;externalId=1030381\" target=\"_blank\" rel=\"external\">Understanding SCSI device/target NMP errors/conditions in ESX/ESXi 4.x and ESXi 5.0 (1030381)</a>。</p>\n<p>-p或—plugin，用来解析VMware插件传输代码，有关 SCSI 插件 NMP 条件和错误代码的列表，请参见 <a href=\"https://kb.vmware.com/selfservice/search.do?cmd=displayKC&amp;docType=kc&amp;docTypeID=DT_KB_1_1&amp;externalId=2004086\" target=\"_blank\" rel=\"external\">Understanding SCSI plug-in NMP errors/conditions in ESX/ESXi 4.x/5.x/6.0 (2004086)</a>。</p>\n<p>-s或—sense-key，用来解析SCSI感知秘钥，SCSI感知秘钥显示在命令返回CHECK CONDITION状态时可用的感知数据中。感知密钥包含了解命令失败原因所必需的所有信息。<br>有关详细信息，请参见 <a href=\"http://www.t10.org/lists/2sensekey.htm\" target=\"_blank\" rel=\"external\">SCSI Sense Keys</a>。</p>\n<p>-a 或–additional-sense-data，用来解析SCSI其他感知数据，其是由两个字节组成，通常由REQUEST SENSE命令返回。其他感知代码 (ASC) 字节说明感知密钥字段中报告的错误异常的相关信息。其他感知代码限定符 (ASCQ) 表示与其他感知代码相关的详细信息。<br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">|<span class=\"string\">-&gt; ASC value (in hexadecimal)</span></div><div class=\"line\">||</div><div class=\"line\">||<span class=\"string\"> </span>|<span class=\"string\">-&gt; ASCQ value (in hexadecimal)</span></div><div class=\"line\">||<span class=\"string\"> </span>||</div><div class=\"line\">||<span class=\"string\"> </span>||<span class=\"string\"> </span>|<span class=\"string\">-&gt; Codes identifying devices that may use the ASC/ASCQ pair</span></div><div class=\"line\">||<span class=\"string\"> </span>||<span class=\"string\"> </span>|<span class=\"string\">-&gt; value. (See list of device code letters below.)</span></div><div class=\"line\">||<span class=\"string\"> </span>||<span class=\"string\"> </span>|</div><div class=\"line\">||<span class=\"string\"> </span>||<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\">-&gt; Error or exception indicated by the</span></div><div class=\"line\">||<span class=\"string\"> </span>||<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\">-&gt; ASC/ASCQ pair value.</span></div><div class=\"line\">||<span class=\"string\"> </span>||<span class=\"string\"> </span>|<span class=\"string\">------------</span>|<span class=\"string\"> </span>|<span class=\"string\">------------------------------------------</span>|</div><div class=\"line\">04/00 DTLPWROMAEBKVF LOGICAL UNIT NOT READY, CAUSE NOT REPORTABLE</div><div class=\"line\">04/01 DTLPWROMAEBKVF LOGICAL UNIT IS IN PROCESS OF BECOMING READY</div><div class=\"line\">04/02 DTLPWROMAEBKVF LOGICAL UNIT NOT READY, INITIALIZING COMMAND REQUIRED</div><div class=\"line\">04/03 DTLPWROMAEBKVF LOGICAL UNIT NOT READY, MANUAL INTERVENTION REQUIRED</div></pre></td></tr></table></figure></p>\n<p>有关详细信息，请参见 <a href=\"http://www.t10.org/lists/2asc.htm\" target=\"_blank\" rel=\"external\">SCSI Additional Sense Data</a>。</p>\n<h2 id=\"4-参考文献\"><a href=\"#4-参考文献\" class=\"headerlink\" title=\"4. 参考文献\"></a>4. 参考文献</h2><p>[1] <a href=\"https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=289902\" target=\"_blank\" rel=\"external\">Interpreting SCSI sense codes in VMware ESXi and ESX (289902)</a><br>[2] <a href=\"https://kb.vmware.com/selfservice/search.do?cmd=displayKC&amp;docType=kc&amp;docTypeID=DT_KB_1_1&amp;externalId=1029039\" target=\"_blank\" rel=\"external\">Understanding SCSI host-side NMP errors/conditions in ESX 4.x and ESXi 5.x (1029039)</a><br>[3] <a href=\"http://www.t10.org/lists/2status.htm\" target=\"_blank\" rel=\"external\">SCSI Status Codes</a><br>[4] <a href=\"https://kb.vmware.com/selfservice/search.do?cmd=displayKC&amp;docType=kc&amp;docTypeID=DT_KB_1_1&amp;externalId=1030381\" target=\"_blank\" rel=\"external\">Understanding SCSI device/target NMP errors/conditions in ESX/ESXi 4.x and ESXi 5.0 (1030381)</a><br>[5] <a href=\"https://kb.vmware.com/selfservice/search.do?cmd=displayKC&amp;docType=kc&amp;docTypeID=DT_KB_1_1&amp;externalId=2004086\" target=\"_blank\" rel=\"external\">Understanding SCSI plug-in NMP errors/conditions in ESX/ESXi 4.x/5.x/6.0 (2004086)</a><br>[6] <a href=\"http://www.t10.org/lists/2sensekey.htm\" target=\"_blank\" rel=\"external\">SCSI Sense Keys</a><br>[7] <a href=\"http://www.t10.org/lists/2asc.htm\" target=\"_blank\" rel=\"external\">SCSI Additional Sense Data</a></p>\n","categories":[],"tags":[]},{"title":"软件版本号规则","url":"https://cosysn.github.io/2016/11/12/software-version-number-rules/","content":"<!--\n  @author: cosysn    \n  @time: 2014/11/18     \n  @license: GPLv2\n  @contact: cosysn@163.com\n\n  This program is free software; you can redistribute it and/or\n  modify it under the terms of the GNU General Public License\n  as published by the Free Software Foundation; either version 3\n  of the License, or (at your option) any later version.     \n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with GNU Emacs; see the file COPYING.  If not, write to the\n  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n  Boston, MA 02110-1301, USA.\n\n  Copyright (c) 2014 cosysn, Colibri Team, All Rights Reserved.\nend!\n-->\n<a id=\"more\"></a>\n<h2 id=\"版本号命名格式\"><a href=\"#版本号命名格式\" class=\"headerlink\" title=\"版本号命名格式\"></a>版本号命名格式</h2><p>主版本号.次版本号[修正版本号[.编译版本号]]</p>\n<p><code>Marjor_version_Number.Minor.Version.Number[.Resvision_Number[.Build Number]]</code></p>\n<p>版本号由二至四个部分组成：主版本号、次版本号、内部版本号和修订号。主版本号和次版本号是必选的；内部版本号和修订号是可选的，但是如果定义了修订号部分，则内部版本号就是必选的。所有定义的部分都必须是大于或等于 <code>0</code> 的整数。 应根据下面的约定使用这些部分： </p>\n<ul>\n<li><p><code>Major</code>：具有相同名称但不同主版本号的程序集不可互换。例如，这适用于对产品的大量重写，这些重写使得无法实现向后兼容性。 </p>\n</li>\n<li><p><code>Minor</code>：如果两个程序集的名称和主版本号相同，而次版本号不同，这指示显著增强，但照顾到了向后兼容性。例如，这适用于产品的修正版或完全向后兼容的新版本。 </p>\n</li>\n<li><p><code>Build</code>：内部版本号的不同表示对相同源所作的重新编译。这适合于更改处理器、平台或编译器的情况。</p>\n</li>\n<li><p><code>Revision</code>：名称、主版本号和次版本号都相同但修订号不同的程序集应是完全可互换的。这适用于修复以前发布的程序集中的安全漏洞。程序集的只有内部版本号或修订号不同的后续版本被认为是先前版本的修补程序 <code>(Hotfix)</code> 更新。 </p>\n</li>\n</ul>\n<h2 id=\"版本号管理策略\"><a href=\"#版本号管理策略\" class=\"headerlink\" title=\"版本号管理策略\"></a>版本号管理策略</h2><ol>\n<li>项目出版本，版本号为<code>0.1</code>；</li>\n<li>当项目进行了局部修正或<code>BUG</code>修复时，主版本和子版本号都不变，修正版本号递增<code>1</code></li>\n<li>当项目增加了部分功能,主版本号不变，子版本号递增<code>1</code>，同时将修正版本置<code>0</code>。 </li>\n<li>当项目进行了重大修改或局部修改积累较多时，将导致项目的全局变化时，主版本号递增<code>1</code>；</li>\n<li>编译版本号一版由编译器在编译过程中自动生成，我们只定义其格式，并不进行控制；</li>\n<li>当修正版本号为<code>0</code>时，可以省略不写。如初始版本应该是<code>0.1.0</code>，可简写成<code>0.1</code>；</li>\n<li>还可以在版本号的后面加入 <code>alpha</code>、<code>beta</code>、<code>gamma</code>、<code>rc (release candidate)</code>、<code>release</code>、<code>stable</code> 等后缀，在这些后缀后面还可以加数字的版本号。</li>\n</ol>\n","categories":[],"tags":[]},{"title":"Linux内核入门（一） -- EXPORT_SYMBOL小结","url":"https://cosysn.github.io/2016/11/12/introduction-to-linux-kernel-1-export-symbol-summary/","content":"<a id=\"more\"></a>\n<p>EXPORT_SYMBOL能够将函数以符号的形式导出给其他模块使用。当使用EXPORT_SYMBOL导出函数之后，我们可以在/proc/kallsyms中查到导出的函数，其显示格式如下：<br><figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@cosysn ~]# tail /<span class=\"keyword\">proc</span>/kallsyms<span class=\"title\"> </span></div><div class=\"line\">ffffffffa000a720 T<span class=\"title\"> dm_io</span>        [dm_mod]<span class=\"title\"></span></div><div class=\"line\">ffffffffa0005860 T<span class=\"title\"> dm_get_device</span>        [dm_mod]<span class=\"title\"></span></div><div class=\"line\">ffffffffa00006d0 t<span class=\"title\"> dm_set_mdptr</span> [dm_mod]<span class=\"title\"></span></div><div class=\"line\">ffffffffa0004360 t<span class=\"title\"> dm_table_any_busy_target</span>     [dm_mod]<span class=\"title\"></span></div><div class=\"line\">ffffffffa0003e20 t<span class=\"title\"> dm_table_get_immutable_target_type</span>   [dm_mod]<span class=\"title\"></span></div><div class=\"line\">ffffffffa00007a0 t<span class=\"title\"> dm_suspended_md</span>      [dm_mod]<span class=\"title\"></span></div><div class=\"line\">ffffffffa00042a0 t<span class=\"title\"> dm_table_postsuspend_targets</span> [dm_mod]<span class=\"title\"></span></div><div class=\"line\">ffffffffa0006570 t<span class=\"title\"> dm_target_iterate</span>    [dm_mod]<span class=\"title\"></span></div><div class=\"line\">ffffffffa00044b0 T<span class=\"title\"> dm_consume_args</span>      [dm_mod]<span class=\"title\"></span></div><div class=\"line\">ffffffffa0007630 t<span class=\"title\"> dm_copy_name_and_uuid</span>        [dm_mod]</div></pre></td></tr></table></figure></p>\n<p>对于EXPORT_SYMBOL如何实现符号导出的，下面做下简要的分析。</p>\n<p>EXPORT_SYMBOL宏是定义在include/linux/export.h的头文件中，其定义如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\"> * For every exported symbol, place a struct in the __ksymtab section </div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __EXPORT_SYMBOL(sym, sec) \\                             </span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"title\">typeof</span><span class=\"params\">(sym)</span> sym</span>;   \\</div><div class=\"line\">        __CRC_SYMBOL(sym, sec)    \\</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> __kstrtab_#<span class=\"meta\">#sym[]         \\</span></div><div class=\"line\">        __attribute__((section(<span class=\"meta-string\">\"__ksymtab_strings\"</span>), aligned(1)))  \\</div><div class=\"line\">        = VMLINUX_SYMBOL_STR(sym);                  \\</div><div class=\"line\">        extern const struct kernel_symbol __ksymtab_##sym;\\</div><div class=\"line\">        __visible const struct kernel_symbol __ksymtab_##sym        \\</div><div class=\"line\">        __used                                                        \\</div><div class=\"line\">        __attribute__((section(<span class=\"meta-string\">\"___ksymtab\"</span> sec <span class=\"meta-string\">\"+\"</span> #sym), unused))        \\</div><div class=\"line\">        = &#123; (unsigned long)&amp;sym, __kstrtab_##sym &#125;</div><div class=\"line\">&nbsp</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> EXPORT_SYMBOL(sym)               \\</span></div><div class=\"line\">        __EXPORT_SYMBOL(sym, <span class=\"meta-string\">\"\"</span>)</div><div class=\"line\">        </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> EXPORT_SYMBOL_GPL(sym)          \\</span></div><div class=\"line\">        __EXPORT_SYMBOL(sym, <span class=\"meta-string\">\"_gpl\"</span>)</div><div class=\"line\">&nbsp</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> EXPORT_SYMBOL_GPL_FUTURE(sym)   \\</span></div><div class=\"line\">        __EXPORT_SYMBOL(sym, <span class=\"meta-string\">\"_gpl_future\"</span>)</div></pre></td></tr></table></figure></p>\n<p>下面举例说明EXPORT_SYMBOL的作用：<br>如果需要将transport_lookup_cmd_lun导出为内核符号，可以调用EXPORT_SYMBOL(transport_lookup_cmd_lun);</p>\n<ol>\n<li>将其展开得到__EXPORT_SYMBOL(transport_lookup_cmd_lun, “”)</li>\n<li>将__EXPORT_SYMBOL展开，得到<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">  extern typeof(transport_lookup_cmd_lun) transport_lookup_cmd_lun;                                        \\</div><div class=\"line\">__CRC_SYMBOL(transport_lookup_cmd_lun, <span class=\"built_in\">sec</span>)                                        \\</div><div class=\"line\">static const <span class=\"built_in\">char</span> __kstrtab_transport_lookup_cmd_lun[]                        \\</div><div class=\"line\">__attribute__((section(<span class=\"string\">\"__ksymtab_strings\"</span>), aligned(<span class=\"number\">1</span>))) \\</div><div class=\"line\">= VMLINUX_SYMBOL_STR(transport_lookup_cmd_lun);                                \\</div><div class=\"line\">extern const struct kernel_symbol __ksymtab_transport_lookup_cmd_lun;        \\</div><div class=\"line\">__visible const struct kernel_symbol __ksymtab_transport_lookup_cmd_lun        \\</div><div class=\"line\">__used                                                        \\</div><div class=\"line\">__attribute__((section(<span class=\"string\">\"___ksymtab\"</span> <span class=\"built_in\">sec</span> <span class=\"string\">\"+\"</span> transport_lookup_cmd_lun), unused))        \\</div><div class=\"line\">= &#123; (unsigned long)&amp;transport_lookup_cmd_lun, __kstrtab_transport_lookup_cmd_lun &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>下面我们对展开的宏进行分析：<br><figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"built_in\">char</span> __kstrtab_transport_lookup_cmd_lun[]                        \\</div><div class=\"line\">        __attribute__((section(<span class=\"string\">\"__ksymtab_strings\"</span>), aligned(<span class=\"number\">1</span>))) \\</div><div class=\"line\">        = VMLINUX_SYMBOL_STR(transport_lookup_cmd_lun);</div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></div><div class=\"line\">该段代码表示其定义了一个名为__kstrtab_transport_lookup_cmd_lun的字符数组，并将其放到__ksymtab_strings的section下；</div></pre></td></tr></table></figure></p>\n<p>extern const struct kernel_symbol <strong>ksymtab_transport_lookup_cmd_lun;        \\\n        </strong>visible const struct kernel_symbol <strong>ksymtab_transport_lookup_cmd_lun        \\\n        </strong>used                                                        \\<br>        <strong>attribute</strong>((section(“<strong>_ksymtab” sec “+” transport_lookup_cmd_lun), unused))        \\<br>        = { (unsigned long)&amp;transport_lookup_cmd_lun, </strong>kstrtab_transport_lookup_cmd_lun }<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">上段代码中出现了一个新的数据结构kernel_symbol，其表示内核符号</div></pre></td></tr></table></figure></p>\n<p>struct kernel_symbol<br>{<br>        unsigned long value; // 该内核符号的地址<br>        const char *name; // 该内核符号的名字<br>};<br>```<br>那么上段代码就很好理解了，其定义了一个名字为<strong>ksymtab_transport_lookup_cmd_lun的内核符号结构用来存放符号transport_lookup_cmd_lun的地址和名字，<br>并将该</strong>ksymtab_transport_lookup_cmd_lun放到___ksymtab的section下。</p>\n<p>总结：<br>在内核符号导出中，调用了EXPORT_SYMBOL(sym)，则会完成以下操作：<br>(1)  定义一个字符数组存放内核导出符号的名称，并放置到“<strong>ksymtab_strings”的section中。<br>(2)  定义一个内核符号结构用于存放导出符号的内存地址和名称，并放置到”</strong>ksymatab”中。</p>\n<p>即通过EXPORT_SYMBOL(sym)告诉了内核以外的世界关于这个符号的两点信息：内核符号的名称和其内存地址。</p>\n<hr>\n<p>[1]:   谈EXPORT_SYMBOL使用  <a href=\"http://blog.csdn.net/macrossdzh/article/details/4601648\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/macrossdzh/article/details/4601648</a><br>[2]:  关于EXPORT_SYMBOL <a href=\"http://blog.csdn.net/lisan04/article/details/4076013\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/lisan04/article/details/4076013</a></p>\n","categories":[],"tags":[]},{"title":"我的第一篇博客","url":"https://cosysn.github.io/2016/11/11/my-first-blog/","content":"<a id=\"more\"></a>\n<p>过去几年我陆陆续续写过一段时间的博客，先后使用了CSDN、博客园和WordPress等工具，但最后都放弃了。工作了两年，自己越来越忙，每天过着朝九晚五的生活，根本没有时间来思考一些东西，更别谈将自己的感悟写下来啦。仔细品读了<a href=\"http://www.lishen.me/\" target=\"_blank\" rel=\"external\">李参的个人空间</a>、<a href=\"http://www.gtdlife.com/\" target=\"_blank\" rel=\"external\">小强的时间管理博客</a>和<a href=\"http://www.liaoxuefeng.com/\" target=\"_blank\" rel=\"external\">廖雪峰的官方网站</a>等大神的博客，他们将自己对生活的感悟、对技术的沉淀等记录并分享出来。尽管每个人报着不同的目的去写博客，但是在这样一个后博客时代，博客不再追求高PV，不再盲目寻求SEO，它成为一个更加单纯美好的平台。<br>而我写博客的目的就非常简单：</p>\n<pre><code>* 记录，将生活或工作中的所思所想、所学所获写下来；\n* 积累经验，将自己所得总结提炼的经验保存下来，不至于遗忘掉；\n* 分享，将自己的知识分享给他人，更能巩固自己的知识；\n* 交流，和他人交流找到自己的不足，激励自己不断前行；\n</code></pre><p>我希望，它可以伴我走完十年。</p>\n<h2 id=\"我的博客内容\"><a href=\"#我的博客内容\" class=\"headerlink\" title=\"我的博客内容\"></a>我的博客内容</h2><p>可能我的博客记录的比较散乱，但是主要包含以下几点：</p>\n<pre><code>* 学习笔记\n* 生活或工作中突发的灵感\n* 转载一些精品博客\n* 技术总结\n* 生活的感悟\n</code></pre><h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p>1 <a href=\"http://yxcvincent.github.io/2014/12/31/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"external\">戏水龙鹰的博客-我的第一篇博客</a></p>\n","categories":[],"tags":[]},{"title":"about","url":"https://cosysn.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://cosysn.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"https://cosysn.github.io/css/personal-style.css","content":".highlight pre {\n  white-space: pre;\n  word-wrap: break-word;\n}","categories":[],"tags":[]},{"title":"project","url":"https://cosysn.github.io/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://cosysn.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://cosysn.github.io/tag/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"https://cosysn.github.io/link/index.html","content":"","categories":[],"tags":[]}]